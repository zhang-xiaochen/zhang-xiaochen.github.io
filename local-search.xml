<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker_P1</title>
    <link href="/2021/06/12/docker/Docker_P1/"/>
    <url>/2021/06/12/docker/Docker_P1/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-P1"><a href="#Docker-P1" class="headerlink" title="Docker_P1"></a>Docker_P1</h1><blockquote><p><a href="https://chinese.freecodecamp.org/news/the-docker-handbook/">Docker 入门教程 - 2021 最新版 (freecodecamp.org)</a></p></blockquote><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p><em>容器是应用程序层的抽象，可以将代码和依赖项打包在一起。容器不虚拟化整个物理机，仅虚拟化主机操作系统。</em></p><p>虚拟机通常由称为虚拟机监控器的程序创建和管理，例如 <a href="https://www.virtualbox.org/">Oracle VM VirtualBox</a>，<a href="https://www.vmware.com/">VMware Workstation</a>，<a href="https://www.linux-kvm.org/">KVM</a>，<a href="https://docs.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/about/">Microsoft Hyper-V</a> 等等。 该虚拟机监控程序通常位于主机操作系统和虚拟机之间，充当通信介质。</p><p>虚拟机：</p><p><img src="/img/docker/image-20210615211437030.png" alt="image-20210615211437030"></p><p>在虚拟机内部运行的应用程序与 guest 操作系统进行通信，该 guest 操作系统在与虚拟机监控器进行通信，后者随后又与主机操作系统进行通信，以将必要的资源从物理基础设施分配给正在运行的应用程序。</p><p>容器：</p><p><img src="/img/docker/image-20210615211634919.png" alt="image-20210615211634919"></p><p>在容器内部没有完整的 guest 操作系统，它只是通过容器运行时使用主机操作系统，同时保持隔离 – 就像传统的虚拟机一样。</p><p>容器运行时（即 Docker）位于容器和主机操作系统之间，而不是虚拟机监控器中。容器与容器运行时进行通信，容器运行时再与主机操作系统进行通信，以从物理基础设施中获取必要的资源。</p><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><p>镜像是分层只读文件，其中保留着应用程序所需的状态。</p><p>容器只是处于运行状态的镜像。</p><blockquote><p>查看本地机器上的镜像 <code>docker images</code> 或 <code>docker image ls</code></p></blockquote><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>镜像仓库是一个集中式的位置，可以在其中上传镜像，也可以下载其他人创建的镜像。 <a href="https://hub.docker.com/">Docker Hub</a> 是 Docker 的默认公共仓库。另一个非常流行的镜像仓库是 Red Hat 的 <a href="https://quay.io/">Quay</a>。</p><h2 id="Docker架构描述"><a href="#Docker架构描述" class="headerlink" title="Docker架构描述"></a>Docker架构描述</h2><p>既然已经熟悉了有关容器化和 Docker 的大多数基本概念，那么现在是时候了解 Docker 作为软件的架构了。</p><p>该引擎包括三个主要组件：</p><ol><li><strong>Docker 守护程序：</strong> 守护程序（<code>dockerd</code>）是一个始终在后台运行并等待来自客户端的命令的进程。守护程序能够管理各种 Docker 对象。</li><li><strong>Docker 客户端：</strong> 客户端（<code>docker</code>）是一个命令行界面程序，主要负责传输用户发出的命令。</li><li><strong>REST API：</strong> REST API 充当守护程序和客户端之间的桥梁。使用客户端发出的任何命令都将通过 API 传递，最终到达守护程序。</li></ol><p>根据官方<a href="https://docs.docker.com/get-started/overview/#docker-architecture">文档</a>,</p><blockquote><p>“ Docker 使用客户端-服务器体系结构。Docker <em>client</em> 与 Docker <em>daemon</em> 对话，daemon 繁重地构建、运行和分发 Docker 容器”。</p></blockquote><p>作为用户，通常将使用客户端组件执行命令。然后，客户端使用 REST API 来访问长期运行的守护程序并完成工作。 </p><p><img src="/img/docker/image-20210615212459349.png" alt="image-20210615212459349"></p><ol><li>执行 <code>docker run hello-world</code> 命令，其中 <code>hello-world</code> 是镜像的名称。</li><li>Docker 客户端访问守护程序，告诉它获取 <code>hello-world</code> 镜像并从中运行一个容器。</li><li>Docker 守护程序在本地仓库中查找镜像，并发现它不存在，所以在终端上打印 <code>Unable to find image &#39;hello-world:latest&#39; locally</code>。</li><li>然后，守护程序访问默认的公共仓库 Docker Hub，拉取 <code>hello-world</code> 镜像的最新副本，并在命令行中展示 <code>Unable to find image &#39;hello-world:latest&#39; locally</code>。</li><li>Docker 守护程序根据新拉取的镜像创建一个新容器。</li><li>最后，Docker 守护程序运行使用 <code>hello-world</code> 镜像创建的容器，该镜像在终端上输出文本。</li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code class="hljs shell">docker &lt;object&gt; &lt;command&gt; &lt;options&gt;</code></pre><ul><li><code>object</code> 表示将要操作的 Docker 对象的类型。这可以是 <code>container</code>、<code>image</code>、<code>network</code> 或者 <code>volume</code> 对象。</li><li><code>command</code> 表示守护程序要执行的任务，即 <code>run</code> 命令。</li><li><code>options</code> 可以是任何可以覆盖命令默认行为的有效参数，例如端口映射的 <code>--publish</code> 选项。</li></ul><pre><code class="hljs shell">docker container run &lt;image name&gt;</code></pre><p>image name 可以是在线仓库或者本地系统的任何镜像。</p><h3 id="映射端口"><a href="#映射端口" class="headerlink" title="映射端口"></a>映射端口</h3><p>要允许从容器外部进行访问，必须将容器内的相应端口发布到本地网络上的端口。</p><pre><code class="hljs shell">--publish &lt;host port&gt;:&lt;container port&gt;</code></pre><pre><code class="hljs shell">➜  chen5  sudo docker container run --publish 8080:80 fhsinchy/hello-dock[sudo] password for chen:Unable to find image &#x27;fhsinchy/hello-dock:latest&#x27; locallylatest: Pulling from fhsinchy/hello-dock0a6724ff3fcd: Pull complete1d7c87af3754: Pull complete9668ffa91d19: Pull completee81a2f5037c1: Pull complete991b5ddb4d9e: Pull complete9f4fab0aaa1b: Pull completeDigest: sha256:852a90695e942a8aefe5883cb9681a3fbedfdf89f64468e22fa30e04766e5f2eStatus: Downloaded newer image for fhsinchy/hello-dock:latest/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d//docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh/docker-entrypoint.sh: Configuration complete; ready for start up</code></pre><p><img src="/img/docker/image-20210615213732401.png" alt="image-20210615213732401"></p><h3 id="容器后台运行"><a href="#容器后台运行" class="headerlink" title="容器后台运行"></a>容器后台运行</h3><pre><code class="hljs shell">---detach 或 -d 参数</code></pre><pre><code class="hljs shell">➜  chen5  sudo docker container run --publish 8080:80 --detach fhsinchy/hello-dock9918abf45820ca77a80eaa178d7ad66ee114547f3a5124a919e4b5e52b66f486</code></pre><blockquote><p>–publish 和 –detach顺序没有要求</p></blockquote><h3 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h3><pre><code class="hljs shell">container ls</code></pre><pre><code class="hljs shell">➜  chen5  sudo docker container lsCONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                       NAMES9918abf45820   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   bold_dewdney</code></pre><h3 id="查看过去运行的容器"><a href="#查看过去运行的容器" class="headerlink" title="查看过去运行的容器"></a>查看过去运行的容器</h3><pre><code class="hljs shell">--all 或 -a</code></pre><pre><code class="hljs shell">➜  chen5  sudo docker container ls --allCONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS                     PORTS                                   NAMES9918abf45820   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   9 minutes ago    Up 9 minutes               0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   bold_dewdneyb5bcc6b696c9   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   17 minutes ago   Exited (0) 9 minutes ago                                    tender_lamarr2c2ac99bf078   hello-world           &quot;/hello&quot;                 2 days ago       Exited (0) 2 days ago</code></pre><h3 id="指定容器名"><a href="#指定容器名" class="headerlink" title="指定容器名"></a>指定容器名</h3><p>默认情况下每个容器都有两个标识符 </p><ul><li>CONTAINER ID  -&gt; 64个字符的随机字符串</li><li>NAME -&gt; 两个单词的随机组合，下滑线连接</li></ul><pre><code class="hljs shell">--name</code></pre><pre><code class="hljs shell">➜  chen5  sudo docker container run --publish 8888:80 --detach --name hello-docker-container fhsinchy/hello-dock2925cec4da90141fa5f12f7fc38e22f3d01e7d5d3d9118bc63b5e145914bc1ee➜  chen5  sudo docker container lsCONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS                     NAMES2925cec4da90   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   13 seconds ago   Up 12 seconds   0.0.0.0:8888-&gt;80/tcp, :::8888-&gt;80/tcp   hello-docker-container9918abf45820   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   16 minutes ago   Up 16 minutes   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   bold_dewdney</code></pre><h3 id="重命名旧容器"><a href="#重命名旧容器" class="headerlink" title="重命名旧容器"></a>重命名旧容器</h3><pre><code class="hljs shell">docker container rename &lt;container identifier&gt; &lt;new name&gt;</code></pre><pre><code class="hljs shell">➜  chen5  sudo docker container rename bold_dewdney hello-docker-container2➜  chen5  sudo docker container lsCONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS                     NAMES2925cec4da90   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   3 minutes ago    Up 3 minutes    0.0.0.0:8888-&gt;80/tcp, :::8888-&gt;80/tcp   hello-docker-container9918abf45820   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   18 minutes ago   Up 18 minutes   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   hello-docker-container2</code></pre><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><pre><code class="hljs shell">docker container stop &lt;container identifier&gt;</code></pre><blockquote><p>container identifier 可以是 CONTAINER ID 或者NAME</p></blockquote><pre><code class="hljs shell">➜  chen5  sudo docker container stop hello-docker-containerhello-docker-container➜  chen5  sudo docker container lsCONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS                     NAMES9918abf45820   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   21 minutes ago   Up 21 minutes   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   hello-docker-container2</code></pre><p><code>stop</code> 命令通过发送信号<code>SIGTERM</code> 来正常关闭容器。如果容器在一定时间内没有停止运行，则会发出 <code>SIGKILL</code> 信号，该信号会立即关闭容器。</p><p>如果要发送 <code>SIGKILL</code> 信号而不是 <code>SIGTERM</code> 信号，则可以改用 <code>container kill</code> 命令。<code>container kill</code> 命令遵循与 <code>stop</code> 命令相同的语法。</p><pre><code class="hljs shell">docker container kill &lt;container identifier&gt;</code></pre><pre><code class="hljs shell">➜  chen5  sudo docker container kill hello-docker-container2hello-docker-container2➜  chen5  sudo docker container lsCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</code></pre><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><pre><code class="hljs shell">docker container start &lt;container identifier&gt;</code></pre><pre><code class="hljs shell">➜  chen5  sudo docker container start hello-docker-containerhello-docker-container➜  chen5  sudo docker container lsCONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                   NAMES2925cec4da90   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   9 minutes ago   Up 3 seconds   0.0.0.0:8888-&gt;80/tcp, :::8888-&gt;80/tcp   hello-docker-container</code></pre><h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><pre><code class="hljs shell">docker container restart &lt;container identifier&gt;</code></pre><pre><code class="hljs shell">➜  chen5  sudo docker container restart hello-docker-containerhello-docker-container➜  chen5  sudo docker container lsCONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS         PORTS                    NAMES2925cec4da90   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   10 minutes ago   Up 2 seconds   0.0.0.0:8888-&gt;80/tcp, :::8888-&gt;80/tcp   hello-docker-container</code></pre><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><pre><code class="hljs shell">docker container create &lt;options&gt;</code></pre><blockquote><p><code>docker container run</code> 命令实际是 <code>docker container create</code> 和 <code>docker container start</code>两个命令的组合</p></blockquote><pre><code class="hljs shell">➜  ~  sudo docker container create --publish 8080:80 fhsinchy/hello-dock8b88edf8d01e531d7d96824a9add39ad79bf74c4bfde27deb58e1abc8c0de0e0➜  ~  sudo docker container ls -allCONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS    PORTS     NAMES8b88edf8d01e   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   4 seconds ago   Created             great_ganguly</code></pre><h3 id="移除挂起的容器"><a href="#移除挂起的容器" class="headerlink" title="移除挂起的容器"></a>移除挂起的容器</h3><pre><code class="hljs shell">docker container rm &lt;container identifier&gt;</code></pre><blockquote><p>已被停止或终止的容器仍保留在系统中。这些挂起的容器可能会占用空间或与较新的容器发生冲突</p></blockquote><pre><code class="hljs shell">➜  ~  sudo docker container ls --allCONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS                  PORTS     NAMESc211f963a765   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   4 seconds ago   Created                           amazing_turingb5bcc6b696c9   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   3 days ago      Exited (0) 3 days ago             tender_lamarr2c2ac99bf078   hello-world           &quot;/hello&quot;                 6 days ago      Exited (0) 6 days ago             brave_golick666d2f8672e2   hello-world           &quot;/hello&quot;                 6 days ago      Exited (0) 6 days ago             condescending_hellman➜  ~  sudo docker container rm c211f963a765c211f963a765➜  ~  sudo docker container ls --allCONTAINER ID   IMAGE                 COMMAND                  CREATED      STATUS                  PORTS     NAMESb5bcc6b696c9   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   3 days ago   Exited (0) 3 days ago             tender_lamarr2c2ac99bf078   hello-world           &quot;/hello&quot;                 6 days ago   Exited (0) 6 days ago             brave_golick666d2f8672e2   hello-world           &quot;/hello&quot;                 6 days ago   Exited (0) 6 days ago             condescending_hellman➜  ~</code></pre><p>可以一次删除多个容器，传入的标识符用空格隔开即可。</p><p>一次删除多个容器，也可以使用以下命令。</p><pre><code class="hljs shell">docker container</code></pre><pre><code class="hljs shell">➜  ~  sudo docker container ls --allCONTAINER ID   IMAGE                 COMMAND                  CREATED      STATUS                  PORTS     NAMESb5bcc6b696c9   fhsinchy/hello-dock   &quot;/docker-entrypoint.…&quot;   3 days ago   Exited (0) 3 days ago             tender_lamarr2c2ac99bf078   hello-world           &quot;/hello&quot;                 6 days ago   Exited (0) 6 days ago             brave_golick666d2f8672e2   hello-world           &quot;/hello&quot;                 6 days ago   Exited (0) 6 days ago             condescending_hellman➜  ~  sudo docker container pruneWARNING! This will remove all stopped containers.Are you sure you want to continue? [y/N] yDeleted Containers:b5bcc6b696c9eb6802bbd32dde3dc1586f2ebeee8cede3786fa03cf493454a952c2ac99bf078904481b0c7529b5ed5ec98dfbe7620662b5826a90daf90c8932d666d2f8672e233e173dae327b9e5b60859a8b10fc1503070af56aebfefecb7eaTotal reclaimed space: 1.114kB➜  ~  sudo docker container ls --allCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</code></pre><blockquote><p>启动容器的时候有 <code>--rm</code> 参数，标识在容器停止运行的时候删除掉容器。</p></blockquote><pre><code class="hljs angelscript">➜  ~  sudo docker container run --rm --publish <span class="hljs-number">8888</span>:<span class="hljs-number">80</span> --detach --name hello-docker-container fhsinchy/hello-dockab233d95e5cf2c5e4d020747d7a74c591947a6a049f15e11c0e1e21ada66205c➜  ~  sudo docker container ls --allCONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS    NAMESab233d95e5cf   fhsinchy/hello-dock   <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   <span class="hljs-number">34</span> seconds ago   Up <span class="hljs-number">33</span> seconds   <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">8888</span>-&gt;<span class="hljs-number">80</span>/tcp, :::<span class="hljs-number">8888</span>-&gt;<span class="hljs-number">80</span>/tcp   hello-docker-container➜  ~  sudo docker container stop hello-docker-containerhello-docker-container➜  ~  sudo docker container ls --allCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</code></pre><h3 id="以交互式模式启动容器"><a href="#以交互式模式启动容器" class="headerlink" title="以交互式模式启动容器"></a>以交互式模式启动容器</h3><blockquote><p>交互式镜像如 ubuntu之类的linux镜像，运行的时候进入到ubuntu的bash，启动的时候需要加  <code>-it</code>参数。</p><ul><li>选项 <code>-i</code> 或 <code>--interactive</code> 连接到容器的输入流，以便可以将输入发送到 bash。</li><li><code>-t</code> 或 <code>--tty</code> 选项可通过分配伪 tty 来格式化展示并提供类似本机终端的体验。</li></ul></blockquote><pre><code class="hljs shell">➜ ~  sudo docker container run --rm -it ubuntuUnable to find image &#x27;ubuntu:latest&#x27; locallylatest: Pulling from library/ubuntuc549ccf8d472: Pull completeDigest: sha256:aba80b77e27148d99c034a987e7da3a287ed455390352663418c0f2ed40417feStatus: Downloaded newer image for ubuntu:latestroot@269a69740972:/# cat /etc/os-releaseNAME=&quot;Ubuntu&quot;VERSION=&quot;20.04.2 LTS (Focal Fossa)&quot;ID=ubuntuID_LIKE=debianPRETTY_NAME=&quot;Ubuntu 20.04.2 LTS&quot;VERSION_ID=&quot;20.04&quot;HOME_URL=&quot;https://www.ubuntu.com/&quot;SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;VERSION_CODENAME=focalUBUNTU_CODENAME=focalroot@269a69740972:/#</code></pre><blockquote><p>退出交互容器命令 <code>ctrl d</code></p></blockquote><p>交互执行node，可以运行js代码</p><pre><code class="hljs shell">➜  ~  sudo docker run --rm -it nodeUnable to find image &#x27;node:latest&#x27; locallylatest: Pulling from library/noded960726af2be: Pull completee8d62473a22d: Pull complete8962bc0fad55: Pull complete65d943ee54c1: Pull complete532f6f723709: Pull completef8463f32765b: Pull complete5714599515d2: Pull complete0f0993710fe6: Pull completed09a14b7c3cb: Pull completeDigest: sha256:e36cf1bb8719551220ba8c3ee1583881e79ad040803570e0849b00b8fe009153Status: Downloaded newer image for node:latestWelcome to Node.js v16.3.0.Type &quot;.help&quot; for more information.<span class="hljs-meta">&gt;</span><span class="bash"> var a = 1;</span>undefined<span class="hljs-meta">&gt;</span><span class="bash"> var b = 2;</span>undefined<span class="hljs-meta">&gt;</span><span class="bash"> a + b</span>3</code></pre><h3 id="在容器里执行命令"><a href="#在容器里执行命令" class="headerlink" title="在容器里执行命令"></a>在容器里执行命令</h3><blockquote><p>通过运行特定容器 让容器执行传入的命令。</p></blockquote><pre><code class="hljs shell">docker container run &lt;image name&gt; &lt;command&gt;</code></pre><pre><code class="hljs shell">➜  ~  sudo docker container run --rm busybox echo -n my-secret | base64Unable to find image &#x27;busybox:latest&#x27; locallylatest: Pulling from library/busyboxb71f96345d44: Pulling fs layerb71f96345d44: Download completeb71f96345d44: Pull completeDigest: sha256:930490f97e5b921535c153e0e7110d251134cc4b72bbb8133c6a5065cc68580dStatus: Downloaded newer image for busybox:latestbXktc2VjcmV0</code></pre><blockquote><p>busybox -&gt; The Swiss Army Knife of Embedded Linux</p></blockquote><pre><code class="hljs shell">➜  ~  sudo docker container run ubuntu uname -aLinux e090d6ac7e4b 5.4.72-microsoft-standard-WSL2 #1 SMP Wed Oct 28 23:40:43 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</code></pre>]]></content>
    
    
    <categories>
      
      <category>容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>volatile关键字使用指南</title>
    <link href="/2021/03/27/blog/volatile/"/>
    <url>/2021/03/27/blog/volatile/</url>
    
    <content type="html"><![CDATA[<h1 id="volatile关键字使用指南"><a href="#volatile关键字使用指南" class="headerlink" title="volatile关键字使用指南"></a>volatile关键字使用指南</h1><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.way.thread;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaskRunner</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;        <span class="hljs-keyword">this</span>.number = number;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumber</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> number;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;        TaskRunner taskRunner = <span class="hljs-keyword">new</span> TaskRunner();        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;            <span class="hljs-keyword">try</span> &#123;                Thread.sleep(<span class="hljs-number">3000</span>);            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;            taskRunner.add(<span class="hljs-number">100</span>);            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; over&quot;</span>);        &#125;).start();        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;            <span class="hljs-keyword">if</span> (taskRunner.getNumber() == <span class="hljs-number">100</span>) &#123;                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; over&quot;</span>);                <span class="hljs-keyword">return</span>;            &#125;        &#125;    &#125;&#125;</code></pre><p>​        我们期望的运行结果是新线程修改完number的值以后，主线程能够获取到新的值，从而结束线程，但结果并非如此：</p><p><img src="/img/volatile/image-20210327153904240.png" alt="image-20210327153904240"></p><p>将number字段改为volatile修饰以后：</p><p><img src="/img/volatile/image-20210327161321414.png" alt="image-20210327161321414"></p><h2 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h2><blockquote><p> 可见性指一个线程对共享变量的修改能够及时的被其他线程看到。</p></blockquote><p>​        JVM中所有变量都存储在主内存中，每个线程都有自己独立的本地内存，用来保存使用到的变量副本，并且，线程对于共享变量的操作都必须再自己的工作内存中进行，不能直接从主内存中读写，不同线程之间无法直接访问其他线程工作内存中的变量，线程之间的变量值传递需要通过主内存来完成。</p><p>​        Java 提供了一种稍弱的同步机制，即 volatile 变量，用来<code>确保将变量的更新操作通知到其它线程</code>。当把共享变量声明为 volatile 类型后，线程对该变量修改时会将该变量的值<code>立即刷新回主内存</code>，同时会使其它线程中<code>缓存的该变量无效</code>，从而其它线程在读取该值时会从主内中重新读取该值（参考缓存一致性）。因此在读取 volatile 类型的变量时总是会返回最新写入的值。</p><p><img src="/img/volatile/image-20210327161709277.png" alt="image-20210327161709277"></p><h2 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h2><p>​        为了提高性能，编译器和处理器会对代码编译后的指令进行重新排序。</p><ul><li>编译器会在不改变单线程语义的情况下，对语句进行重排。</li><li>如果代码中某些语句之间不存在数据依赖，处理器可以对机器指令进行排序。</li><li>高速缓存的存在使程序的读写顺序可能是错乱的。</li></ul><p><img src="/img/volatile/cpu.png" alt="image-20210327161709277"></p><p><code>在JDK1.5之后，可以使用volatile变量禁止指令重排序。</code></p><h2 id="volatile-和-synchronization"><a href="#volatile-和-synchronization" class="headerlink" title="volatile 和 synchronization"></a>volatile 和 synchronization</h2><p>​        多线程应用中，我们必须确保互斥性和可见性。</p><ul><li>synchronization修饰的方法和代码块可以实现互斥性和可见性。</li><li>volatile关键字只能确保可见性。</li></ul><p>​        volatile相较于synchronization更轻量，不会阻塞线程。在不需要互斥的情况下比较有用。</p><h2 id="Happens-Before原则"><a href="#Happens-Before原则" class="headerlink" title="Happens-Before原则"></a>Happens-Before原则</h2><p>JVM定义的Happens-Before原则是一组偏序关系：<code>对于两个操作A和B，这两个操作可以在不同的线程中执行。如果A Happens-Before B，那么可以保证，当A操作执行完后，A操作的执行结果对B操作是可见的。</code></p><p>Happens-Before的规则包括：</p><ol><li>程序顺序规则</li><li>锁定规则</li><li>volatile变量规则</li><li>线程启动规则</li><li>线程结束规则</li><li>中断规则</li><li>终结器规则</li><li>传递性规则</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaskRunner</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">boolean</span> ready;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;        <span class="hljs-keyword">this</span>.number = number;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">getReady</span><span class="hljs-params">()</span></span>&#123;       <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.ready;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setReady</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> ready)</span></span>&#123;        <span class="hljs-keyword">this</span>.ready = ready;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumber</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> number;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;        TaskRunner taskRunner = <span class="hljs-keyword">new</span> TaskRunner();        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;            taskRunner.setNumber(<span class="hljs-number">100</span>);            taskRunner.setReady(<span class="hljs-keyword">true</span>); <span class="hljs-comment">// ready使用volatile修饰 根据Happend-Before原则 该线程的操作结果是可以被下面的线程看到的</span>        &#125;).start();        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;            <span class="hljs-keyword">try</span> &#123;                Thread.sleep(<span class="hljs-number">3000</span>);            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;            <span class="hljs-keyword">if</span>(taskRunner.getReady())&#123;                System.out.println(taskRunner.getNumber());            &#125;        &#125;).start();    &#125;&#125;</code></pre><p>执行结果：</p><p><img src="/img/volatile/image-20210327173906892.png" alt="image-20210327173906892"></p>]]></content>
    
    
    <categories>
      
      <category>并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>volatile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Object转Json遇到的坑</title>
    <link href="/2021/01/23/blog/JsonParseBug/"/>
    <url>/2021/01/23/blog/JsonParseBug/</url>
    
    <content type="html"><![CDATA[<h1 id="Object转Json遇到的坑"><a href="#Object转Json遇到的坑" class="headerlink" title="Object转Json遇到的坑"></a>Object转Json遇到的坑</h1><blockquote><p> fastjson 在将Object转为Json的时候，如果Object中有相同字段，且字段为复杂对象，他们的引用指向同一个对象的时候会出现某一个对象转换异常（”$ref”: “$.dataInner.list[0]”）。</p></blockquote><p>测试常用JSON工具是否会有同样的坑：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 常用工具类hutool--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- google的gson--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 阿里的fastjson --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.73<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- springboot2.3.2.RELEASE 自带的jackson --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-datatype-jdk8<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.module<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-module-parameter-names<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>测试对象：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.way.bugTest;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataOuter</span> </span>&#123;    <span class="hljs-keyword">private</span> String string;    <span class="hljs-keyword">private</span> List&lt;DataTest&gt; list;    <span class="hljs-keyword">private</span> DataInner dataInner;&#125;</code></pre><p>DataInner：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.way.bugTest;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataInner</span> </span>&#123;    <span class="hljs-keyword">private</span> String string;    <span class="hljs-keyword">private</span> List&lt;DataTest&gt; list;&#125;</code></pre><p>DataTest：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.way.bugTest;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataTest</span> </span>&#123;    <span class="hljs-keyword">private</span> String string;    <span class="hljs-keyword">private</span> Integer integer;    <span class="hljs-keyword">private</span> Date date;&#125;</code></pre><blockquote><p> DataOuter中有DataInner中的所有字段，使用Spring的BeanUtils.copyProperties浅拷贝复现bug。</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.way.bugTest;<span class="hljs-keyword">import</span> cn.hutool.json.JSONUtil;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.google.gson.Gson;<span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        DataOuter dataOuter = <span class="hljs-keyword">new</span> DataOuter();        dataOuter.setString(<span class="hljs-string">&quot;string&quot;</span>);        List&lt;DataTest&gt; dataTests = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        DataTest dataTest = <span class="hljs-keyword">new</span> DataTest();        dataTest.setDate(<span class="hljs-keyword">new</span> Date(<span class="hljs-number">100</span>));        dataTest.setInteger(<span class="hljs-number">100</span>);        dataTest.setString(<span class="hljs-string">&quot;str100&quot;</span>);        dataTests.add(dataTest);        DataTest dataTest1 = <span class="hljs-keyword">new</span> DataTest();        dataTest1.setDate(<span class="hljs-keyword">new</span> Date(<span class="hljs-number">200</span>));        dataTest1.setInteger(<span class="hljs-number">200</span>);        dataTest1.setString(<span class="hljs-string">&quot;str200&quot;</span>);        dataOuter.setList(dataTests);        DataInner dataInner = <span class="hljs-keyword">new</span> DataInner();        <span class="hljs-comment">// 浅拷贝</span>        BeanUtils.copyProperties(dataOuter,dataInner);        dataOuter.setDataInner(dataInner);        <span class="hljs-comment">// cn.hutool.json</span>        System.out.println(JSONUtil.toJsonStr(dataOuter));        <span class="hljs-comment">// com.google.gson</span>        Gson gson = <span class="hljs-keyword">new</span> Gson();        System.out.println(gson.toJson(dataOuter));        <span class="hljs-comment">// com.alibaba.fastjson</span>        System.out.println(JSON.toJSONString(dataOuter));        <span class="hljs-comment">// com.fasterxml.jackson</span>        ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();        <span class="hljs-keyword">try</span> &#123;            System.out.println(objectMapper.writeValueAsString(dataOuter));        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>结果：</p><pre><code class="hljs json"># cn.hutool.json&#123;    <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,    <span class="hljs-attr">&quot;list&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;date&quot;</span>: <span class="hljs-number">100</span>,            <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;str100&quot;</span>,            <span class="hljs-attr">&quot;integer&quot;</span>: <span class="hljs-number">100</span>        &#125;    ],    <span class="hljs-attr">&quot;dataInner&quot;</span>: &#123;        <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,        <span class="hljs-attr">&quot;list&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;date&quot;</span>: <span class="hljs-number">100</span>,                <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;str100&quot;</span>,                <span class="hljs-attr">&quot;integer&quot;</span>: <span class="hljs-number">100</span>            &#125;        ]    &#125;&#125;# com.google.gson&#123;    <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,    <span class="hljs-attr">&quot;list&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;str100&quot;</span>,            <span class="hljs-attr">&quot;integer&quot;</span>: <span class="hljs-number">100</span>,            <span class="hljs-attr">&quot;date&quot;</span>: <span class="hljs-string">&quot;Jan 1, 1970 8:00:00 AM&quot;</span>        &#125;    ],    <span class="hljs-attr">&quot;dataInner&quot;</span>: &#123;        <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,        <span class="hljs-attr">&quot;list&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;str100&quot;</span>,                <span class="hljs-attr">&quot;integer&quot;</span>: <span class="hljs-number">100</span>,                <span class="hljs-attr">&quot;date&quot;</span>: <span class="hljs-string">&quot;Jan 1, 1970 8:00:00 AM&quot;</span>            &#125;        ]    &#125;&#125;# com.alibaba.fastjson&#123;    <span class="hljs-attr">&quot;dataInner&quot;</span>: &#123;        <span class="hljs-attr">&quot;list&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;date&quot;</span>: <span class="hljs-number">100</span>,                <span class="hljs-attr">&quot;integer&quot;</span>: <span class="hljs-number">100</span>,                <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;str100&quot;</span>            &#125;        ],        <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>    &#125;,    <span class="hljs-attr">&quot;list&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;$ref&quot;</span>: <span class="hljs-string">&quot;$.dataInner.list[0]&quot;</span>        &#125;    ],    <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>&#125;# com.fasterxml.jackson&#123;    <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,    <span class="hljs-attr">&quot;list&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;str100&quot;</span>,            <span class="hljs-attr">&quot;integer&quot;</span>: <span class="hljs-number">100</span>,            <span class="hljs-attr">&quot;date&quot;</span>: <span class="hljs-number">100</span>        &#125;    ],    <span class="hljs-attr">&quot;dataInner&quot;</span>: &#123;        <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,        <span class="hljs-attr">&quot;list&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;string&quot;</span>: <span class="hljs-string">&quot;str100&quot;</span>,                <span class="hljs-attr">&quot;integer&quot;</span>: <span class="hljs-number">100</span>,                <span class="hljs-attr">&quot;date&quot;</span>: <span class="hljs-number">100</span>            &#125;        ]    &#125;&#125;</code></pre><p><strong>hutool、gson、jackson测试均未发现如此问题，只有fastjson有这样的情况。</strong></p>]]></content>
    
    
    <categories>
      
      <category>fastjson</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode(一)</title>
    <link href="/2020/09/18/leetcode/LeetCode1/"/>
    <url>/2020/09/18/leetcode/LeetCode1/</url>
    
    <content type="html"><![CDATA[<ol><li><p>两数之和<br>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出<code>和</code>为<code>目标值</code>的那 两个 整数，并返回他们的<code>数组下标</code>。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素<code>不能</code>使用两遍。</p><pre><code class="hljs java">   <span class="hljs-comment">/**</span><span class="hljs-comment">    * 给定 nums = [2, 7, 11, 15], target = 9 </span><span class="hljs-comment">    * 因为 nums[0] + nums[1] = 2 + 7 = 9 </span><span class="hljs-comment">    * 所以返回 [0, 1]</span><span class="hljs-comment">    */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123; <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;        HashMap&lt;Integer, Integer&gt; temp = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;            <span class="hljs-keyword">if</span> (temp.get(nums[i]) != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;temp.get(nums[i]),i&#125;;            &#125;            temp.put(target - nums[i], i);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];    &#125;&#125;题解：遍历nums，根据输入的target，算出应该目标值target - nums[i]，将算出的值存到HashMap（值为key,下标为value）中，存之前先去map中取，存在则结束，否则将计算的目标值存起来。由于HashMap查询复杂度为O(<span class="hljs-number">1</span>)，所以用HashMap来做容器。</code></pre></li><li><p>两数相加</p><p>给出两个 非空 的链表用来表示两个<code>非负</code>的整数。其中，它们各自的位数是按照 <code>逆序</code> 的方式存储的，并且它们的<code>每个节点只能存储 一位 数字</code>。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设<code>除了数字 0 </code>之外，这两个数都<code>不会以 0 开头</code>。</p><pre><code class="hljs java"> <span class="hljs-comment">/**</span><span class="hljs-comment">    * 示例：</span><span class="hljs-comment">    * 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><span class="hljs-comment">    * 输出：7 -&gt; 0 -&gt; 8</span><span class="hljs-comment">    * 原因：342 + 465 = 807</span><span class="hljs-comment"> *</span><span class="hljs-comment">    * Definition for singly-linked list.</span><span class="hljs-comment">    * public class ListNode &#123;</span><span class="hljs-comment">    *     int val;</span><span class="hljs-comment">    *     ListNode next;</span><span class="hljs-comment">    *     ListNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment">    * &#125;</span><span class="hljs-comment">    */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;        ListNode header = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);        <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>;        ListNode p = l1, q = l2, curr = header;        <span class="hljs-keyword">while</span>(p != <span class="hljs-keyword">null</span> || q != <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">int</span> x = (p != <span class="hljs-keyword">null</span>) ? p.val : <span class="hljs-number">0</span>;            <span class="hljs-keyword">int</span> y = (q != <span class="hljs-keyword">null</span>) ? q.val : <span class="hljs-number">0</span>;            <span class="hljs-keyword">int</span> sum = (x + y + carry); <span class="hljs-comment">// 两数相同位数相加，carry为是否有进位情况 上一轮循环也就是低位产生的进位值</span>            carry = sum / <span class="hljs-number">10</span>;<span class="hljs-comment">// 满十进一 进位的值 </span>            curr.next = <span class="hljs-keyword">new</span> ListNode(sum % <span class="hljs-number">10</span>);            curr = curr.next;            p = (p != <span class="hljs-keyword">null</span>) ? p.next : <span class="hljs-keyword">null</span>;            q = (q != <span class="hljs-keyword">null</span>) ? q.next : <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">if</span> (carry &gt; <span class="hljs-number">0</span>) &#123;            curr.next = <span class="hljs-keyword">new</span> ListNode(carry);        &#125;        <span class="hljs-keyword">return</span> header.next;    &#125;&#125;题解：两数相加，注意满十进一，以及ListNode遍历即可。此方法为循环求解。</code></pre><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    * 示例：</span><span class="hljs-comment">    * 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><span class="hljs-comment">    * 输出：7 -&gt; 0 -&gt; 8</span><span class="hljs-comment">    * 原因：342 + 465 = 807</span><span class="hljs-comment">    *</span><span class="hljs-comment">    * Definition for singly-linked list.</span><span class="hljs-comment">    * public class ListNode &#123;</span><span class="hljs-comment">    *     int val;</span><span class="hljs-comment">    *     ListNode next;</span><span class="hljs-comment">    *     ListNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment">    * &#125;</span><span class="hljs-comment">    */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;        <span class="hljs-keyword">return</span> addTowNumber2(l1,l2,<span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>));    &#125;     <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTowNumber2</span><span class="hljs-params">(ListNode l1, ListNode l2, ListNode res)</span></span>&#123;      ListNode curr = res;        l1 = (l1 != <span class="hljs-keyword">null</span>) ? l1 : <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>); <span class="hljs-comment">// l1为null 下一次递归判断 l1.next 空指针异常</span>        l2 = (l2 != <span class="hljs-keyword">null</span>) ? l2 : <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);        <span class="hljs-keyword">int</span> sum = l1.val + l2.val + curr.val;        curr.val = sum % <span class="hljs-number">10</span>;        <span class="hljs-keyword">int</span> carry = sum / <span class="hljs-number">10</span>;        <span class="hljs-keyword">if</span> (l1.next != <span class="hljs-keyword">null</span> || l2.next != <span class="hljs-keyword">null</span>)&#123;            curr.next = <span class="hljs-keyword">new</span> ListNode(carry);            curr = curr.next;            addTowNumber2(l1.next,l2.next,curr);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">if</span> (carry &gt; <span class="hljs-number">0</span>)&#123;                curr.next = <span class="hljs-keyword">new</span> ListNode(carry); <span class="hljs-comment">// (5) + (5) = (1 -&gt; 0) </span>            &#125;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;  </code></pre></li><li><p>无重复字符的最长子串</p><p>给定一个字符串，请你找出其中不含有重复字符的 <code>最长子串</code> 的长度。</p><pre><code class="hljs java">    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</span><span class="hljs-comment">     * 输入: &quot;abcabcbb&quot;</span><span class="hljs-comment">     * 输出: 3</span><span class="hljs-comment">     * 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * 输入: &quot;bbbbb&quot;</span><span class="hljs-comment">     * 输出: 1</span><span class="hljs-comment">     * 解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * 输入: &quot;pwwkew&quot;</span><span class="hljs-comment">     * 输出: 3</span><span class="hljs-comment">     * 解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><span class="hljs-comment">     *      请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     */</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;  <span class="hljs-keyword">char</span>[] chars = s.toCharArray();     <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>,curr = <span class="hljs-number">0</span>,index = <span class="hljs-number">0</span>, strLength = chars.length;     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = index; i &lt; strLength; i++) &#123;         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = index; j &lt; i; j++) &#123;             <span class="hljs-keyword">if</span> (chars[i] == chars[j]) &#123;                 index++;                 i = index;                 j = index;                 res = Math.max(res,curr);                 curr = <span class="hljs-number">0</span>;             &#125;         &#125;         curr++;     &#125;     res = Math.max(res,curr);     <span class="hljs-keyword">return</span> res; &#125;题解：从左到右遍历，每拿到一个<span class="hljs-keyword">char</span>都与之前的遍历过的<span class="hljs-keyword">char</span>进行比较，如果有重复，那么从重复的元素，重新开始遍历。</code></pre></li></ol><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB(一)</title>
    <link href="/2020/09/03/mongodb/mongodb/"/>
    <url>/2020/09/03/mongodb/mongodb/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB-一"><a href="#MongoDB-一" class="headerlink" title="MongoDB (一)"></a>MongoDB (一)</h1><blockquote><p>MongoDB（来自于英文单词“Humongous”，中文含义为“庞大”）是可以应用于各种规模的企业、各个行业以及各类应用程序的开源数据库。作为一个适用于敏捷开发的数据库，MongoDB的数据模式可以随着应用程序的发展而灵活地更新。与此同时，它也为开发人员 提供了传统数据库的功能：<code>二级索引</code>，<code>完整的查询系统</code>以及<code>严格一致性</code>等等。 MongoDB能够使企业更加具有<code>敏捷性</code>和<code>可扩展性</code>，各种规模的企业都可以通过使用MongoDB来创建新的应用，提高与客户之间的工作效率，加快产品上市时间，以及降低企业成本。</p><p>MongoDB是专为<code>可扩展性</code>，<code>高性能</code>和<code>高可用性</code>而设计的数据库。它可以从<code>单服务器</code>部署扩展到大型、复杂的<code>多数据中心</code>架构。利用<code>内存计算</code>的优势，MongoDB能够提供<code>高性能的数据读写操作</code>。 MongoDB的<code>本地复制</code>和<code>自动故障转移</code>功能使您的应用程序具有企业级的<code>可靠性</code>和<code>操作灵活性</code>。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>MongoDB有两个版本，社区版和企业版。（以下使用ubuntu社区版）</p><blockquote><p>version 4.4</p></blockquote><h3 id="社区版"><a href="#社区版" class="headerlink" title="社区版"></a>社区版</h3><blockquote><p>不支持WSL</p></blockquote><ol><li><p>包管理添加公钥</p> <pre><code class="hljs shell">~ ❯ wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -   06:31:54 PMOK</code></pre><p> 如果执行失败，提示gnupg未安装，则先执行安装gnupg命令，然后重试。</p> <pre><code class="hljs shell">sudo apt-get install gnupg</code></pre></li><li><p>生成列表文件</p><ul><li>ubuntu 18.04</li></ul><pre><code class="hljs shell">echo &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list</code></pre><ul><li>ubuntu 20.04</li></ul><pre><code class="hljs shell">echo &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list</code></pre></li><li><p>更新</p> <pre><code class="hljs shell">sudo apt-get update</code></pre></li><li><p>下载</p><ul><li>最新版本</li></ul><pre><code class="hljs shell">sudo apt-get install -y mongodb-org</code></pre><ul><li>指定版本</li></ul><pre><code class="hljs shell">sudo apt-get install -y mongodb-org=4.4.0 mongodb-org-server=4.4.0 mongodb-org-shell=4.4.0 mongodb-org-mongos=4.4.0 mongodb-org-tools=4.4.0</code></pre><blockquote><p>将MongoDB固定到当前版本，避免升级包时候误升级。</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;mongodb-org hold&quot;</span> | sudo dpkg --<span class="hljs-built_in">set</span>-selections</span><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;mongodb-org-server hold&quot;</span> | sudo dpkg --<span class="hljs-built_in">set</span>-selections</span><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;mongodb-org-shell hold&quot;</span> | sudo dpkg --<span class="hljs-built_in">set</span>-selections</span><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;mongodb-org-mongos hold&quot;</span> | sudo dpkg --<span class="hljs-built_in">set</span>-selections</span><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;mongodb-org-tools hold&quot;</span> | sudo dpkg --<span class="hljs-built_in">set</span>-selections</span></code></pre></blockquote></li></ol><p>其他版本安装参考：<a href="https://docs.mongodb.com/manual/installation/">官方文档</a></p><h2 id="MongoShell"><a href="#MongoShell" class="headerlink" title="MongoShell"></a>MongoShell</h2><blockquote><p>MongoShell是由JavaScript实现的MongoDB客户端命令行工具，可以用来增删改查，执行权限操作等。</p><p>MongoDB 4.2 (and 4.0.13)之后连接非官方MongoDB，会有提示警告信息。</p><p>限制每行4095 个codepoints ，超过会被截断。</p></blockquote><ol><li><p>本地连接</p><p> 直接用mongo命令连接，默认端口<code>27017</code></p> <pre><code class="hljs shell">mongo</code></pre><p> 指定端口</p> <pre><code class="hljs shell">mongo --port 28028</code></pre></li><li><p>远程连接</p><ul><li><p>需要明确指定主机名和端口号</p></li><li><p>字符串</p><pre><code class="hljs shell">mongo &quot;mongodb://mongodb0.example.com:28015&quot;</code></pre></li><li><p>mongo –host <host>:<port></p><pre><code class="hljs shell">mongo --host mongodb0.example.com:28015</code></pre></li><li><p>mongo –host <host> –port <port></p><pre><code class="hljs apache"><span class="hljs-attribute">mongo</span> --host mongodb<span class="hljs-number">0</span>.example.com --port <span class="hljs-number">28015</span></code></pre></li></ul></li><li><p>需要身份验证的实例</p><ul><li><p>字符串</p><pre><code class="hljs shell">mongo &quot;mongodb://alice@mongodb0.examples.com:28015/?authSource=admin&quot;</code></pre><blockquote><p>可以不指定密码，shell会提示输入密码。</p></blockquote></li><li><p>–username <username> –password –authenticationDatabase <db></p><pre><code class="hljs shell">mongo --username alice --password --authenticationDatabase admin --host mongodb0.examples.com --port 28015</code></pre><blockquote><p>指定–password参数，而没有输入密码，shell同样会提示输入密码。</p></blockquote></li></ul></li><li><p>连接集群</p><ul><li><p>字符串(一组连接字符串’,’分割)</p><pre><code class="hljs shell">mongo &quot;mongodb://mongodb0.example.com.local:27017,mongodb1.example.com.local:27017,mongodb2.example.com.local:27017/?replicaSet=replA&quot;</code></pre></li><li><p>命令 –host <set name>/<host>:<port>,<host>:<port></p><pre><code class="hljs shell">mongo --host replA/mongodb0.example.com.local:27017,mongodb1.example.com.local:27017,mongodb2.example.com.local:27017</code></pre></li></ul></li><li><p>TLS/SSL连接</p><ul><li><p>字符串指定<code>ssl=true</code>参数</p><pre><code class="hljs shell">mongo &quot;mongodb://mongodb0.example.com.local:27017,mongodb1.example.com.local:27017,mongodb2.example.com.local:27017/?replicaSet=replA&amp;ssl=true&quot;</code></pre></li><li><p>DNS种子列表连接</p><pre><code class="hljs shell">mongo &quot;mongodb+srv://server.example.com/&quot;</code></pre><blockquote><p>使用+ srv连接字符串修饰符会自动将ssl选项设置为true。</p></blockquote></li><li><p>命令行 指定 –ssl参数</p><pre><code class="hljs shell">mongo --ssl --host replA/mongodb0.example.com.local:27017,mongodb1.example.com.local:27017,mongodb2.example.com.local:27017</code></pre><p>mongo shell 使用：</p></li><li><p>显示当前使用的库</p><pre><code class="hljs shell">db</code></pre></li><li><p>列出所有库</p><pre><code class="hljs shell">show dbs</code></pre></li><li><p>切换库</p><pre><code class="hljs shell">use &lt;database&gt;</code></pre><blockquote><p><a href="https://docs.mongodb.com/manual/reference/method/db.getSiblingDB/#db.getSiblingDB"><code>db.getSiblingDB()</code></a>从当前数据库访问其他数据库而不切换当前db</p><p>可以直接切到不存在的库，新插入数据时候会自动新建库及集合；只切新库，不执行插入操作是不会新建库及集合的。</p><pre><code class="hljs shell">use myNewDatabasedb.myCollection.insertOne( &#123; x: 1 &#125; );</code></pre><ul><li>db 当前数据库 </li><li>myCollection 集合名</li><li>insertOne() 插入记录方法</li></ul><p>如果集合名含有空格、-、数字开头或者是与内置函数冲突，则不能用db.<collection name>的方式选中集合，使用db.getCollection()代替。（db.getCollection(‘my-Collection’)）</p></blockquote></li><li><p>列出当前库集合</p><pre><code class="hljs shell">show collections</code></pre><p>输出结果格式化：</p><pre><code class="hljs shell">db.myCollection.find().pretty()</code></pre><p>其他格式化方法：</p><p>print() ,printjson() , print(tojson(<obj>))</p><p>qiut(); ctrl c 退出mongo shell</p><p>其他操作文档连接：</p></li></ul><ul><li><a href="https://docs.mongodb.com/getting-started/shell">Getting Started Guide</a></li><li><a href="https://docs.mongodb.com/manual/tutorial/insert-documents/">Insert Documents</a></li><li><a href="https://docs.mongodb.com/manual/tutorial/query-documents/">Query Documents</a></li><li><a href="https://docs.mongodb.com/manual/tutorial/update-documents/">Update Documents</a></li><li><a href="https://docs.mongodb.com/manual/tutorial/remove-documents/">Delete Documents</a></li><li><a href="https://docs.mongodb.com/manual/reference/method/">mongo Shell Methods</a></li></ul></li></ol><h3 id="样式配置"><a href="#样式配置" class="headerlink" title="样式配置"></a>样式配置</h3><ol><li><p>自定义提示</p><p>对prompt进行设置，可以是字符串或者是JavaScript代码。可以在当前mongo shell中设置 也可以在<code>/etc/mongorc.js</code>文件中进行设置。</p><ul><li><p>显示行号<br><img src="/img/mongodb/image-20200915181642262.png" alt="image-20200915181642262"></p></li><li><p>显示db和hostname<br><img src="/img/mongodb/image-20200915181715722.png" alt="image-20200915181715722"></p></li><li><p>显示系统正常运行时间和当前文档数量<br><img src="/img/mongodb/image-20200915181738149.png" alt="image-20200915181738149"></p></li></ul></li></ol><ol start="2"><li><p>使用外部编辑器</p><p> 启动mongo shell之前设置<code>EDITOR</code>环境变量</p> <pre><code class="hljs shell">export EDITOR=vimmongo</code></pre><p> 在mongo shell中用 edit &lt;function&gt; ,edit&lt;variable&gt;来打开外部编辑器进行编辑。</p></li><li><p>设置Batch Size （default number of items to display on shell）</p> <pre><code class="hljs shell">DBQuery.shellBatchSize = 10;</code></pre></li></ol><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><ol><li><p>mongo 参数帮助</p> <pre><code class="hljs shell">mongo --shell</code></pre></li><li><p>mongo shell中细分的其他帮助</p> <pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">help</span></span>     db.help()                    help on db methods # db相关的方法帮助文档     db.mycoll.help()             help on collection methods # 集合~     sh.help()                    sharding helpers # 分片~     rs.help()                    replica set helpers # 复制~     help admin                   administrative help # 管理~     help connect                 connecting to a db help # 连接~     help keys                    key shortcuts # 快捷键~     help misc                    misc things to know # 内置封装类     help mr                      mapreduce     show dbs                     show database names     show collections             show collections in current database     show users                   show users in current database     show profile                 show most recent system.profile entries with time &gt;= 1ms     show logs                    show the accessible logger names     show log [name]              prints out the last segment of log in memory, &#x27;global&#x27; is default     use &lt;db_name&gt;                set current database     db.foo.find()                list objects in collection foo     db.foo.find( &#123; a : 1 &#125; )     list objects in foo where a == 1     it                           result of the last line evaluated; use to further iterate     DBQuery.shellBatchSize = x   set default number of items to display on shell     exit                         quit the mongo shell</code></pre></li><li><p>游标相关</p><p> 执行find()方法的时候可以用不同的游标方法去修改find()的行为，可以用help()查看可以用那些游标方法</p><p> <img src="/img/mongodb/image-20200915184347283.png" alt="image-20200915184347283"></p></li></ol><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><p>mongo shell 由JavaScript实现，可以编写JavaScript脚本进行数据处理。</p><p>​    创建新连接</p><pre><code class="hljs shell">new Mongo()new Mongo(&lt;host&gt;)new Mongo(&lt;host:port&gt;)</code></pre><p>​    选择DB</p><pre><code class="hljs shell">conn = new Mongo();db = conn.getDB(&quot;myDatabase&quot;);</code></pre><blockquote><p>可以用connect()方法连接并选择DB</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">db = connect(<span class="hljs-string">&quot;localhost:27020/myDatabase&quot;</span>);</span></code></pre></blockquote><p>​    getDB()和connect()方法会将db设置未全局变量。</p><p>常用命令和javascript写法转换：</p><table><thead><tr><th align="left">Shell Helpers</th><th align="left">JavaScript Equivalents</th></tr></thead><tbody><tr><td align="left"><code>show dbs</code>, <code>show databases</code></td><td align="left">copycopied<code>db.adminCommand(&#39;listDatabases&#39;) </code></td></tr><tr><td align="left"><code>use &lt;db&gt; </code></td><td align="left">copycopied<code>db = db.getSiblingDB(&#39;&lt;db&gt;&#39;) </code></td></tr><tr><td align="left"><code>show collections </code></td><td align="left">copycopied<code>db.getCollectionNames() </code></td></tr><tr><td align="left"><code>show users </code></td><td align="left">copycopied<code>db.getUsers() </code></td></tr><tr><td align="left"><code>show roles </code></td><td align="left">copycopied<code>db.getRoles(&#123;showBuiltinRoles: true&#125;) </code></td></tr><tr><td align="left"><code>show log &lt;logname&gt; </code></td><td align="left">copycopied<code>db.adminCommand(&#123; &#39;getLog&#39; : &#39;&lt;logname&gt;&#39; &#125;) </code></td></tr><tr><td align="left"><code>show logs </code></td><td align="left">copycopied<code>db.adminCommand(&#123; &#39;getLog&#39; : &#39;*&#39; &#125;) </code></td></tr><tr><td align="left"><code>it </code></td><td align="left">copycopied<code>cursor = db.collection.find() if ( cursor.hasNext() )&#123;   cursor.next(); &#125;</code></td></tr></tbody></table><p>–evel 可以向mongo传入JavaScript片段</p><pre><code class="hljs shell">mongo test --eval &quot;printjson(db.getCollectionNames())&quot;</code></pre><p>引入JavaScript脚本</p><pre><code class="hljs shell">mongo localhost:27017/test myjsfile.js</code></pre><p>以上两种是在mongo shell外引入JavaScript 如果是在mongo shell中引入使用lload()方法</p><pre><code class="hljs shell">load(&quot;myjstest.js&quot;)</code></pre><p>load()中指定js脚本可以是相对路径，也可以是绝对路径</p><pre><code class="hljs shell">load(&quot;scripts/myjstest.js&quot;)load(&quot;/data/db/scripts/myjstest.js&quot;)</code></pre><blockquote><p>相对路径是指相对于当前工作路径而言的；</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>数据类型</p><p>Date</p><blockquote><p>带符号的64位整数，表示1970-1-1以来的毫秒数，并不是所有的操作和驱动支持完全的64位建议年份在0~9999之间</p></blockquote><ul><li><p>Date()返回当前时间的字符串；</p></li><li><p>new Date() 返回ISODate()；</p></li><li><p>ISODate 返回 ISODate()；</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> Date()</span>Fri Sep 11 2020 09:34:15 GMT+0800<span class="hljs-meta">&gt;</span><span class="bash"> ISODate()</span>ISODate(&quot;2020-09-11T01:35:21.324Z&quot;)<span class="hljs-meta">&gt;</span><span class="bash"> var date = new Date();</span>ISODate(&quot;2020-09-11T01:35:34.051Z&quot;)</code></pre></li></ul><p>ObjectId </p><blockquote><p>4字节时间戳+5字节随机数+3字节递增计数器</p></blockquote> <pre><code class="hljs shell">new ObjectId</code></pre> <pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> var objId = new ObjectId</span><span class="hljs-meta">&gt;</span><span class="bash"> objId</span>ObjectId(&quot;5f5ade697825049c62468fa8&quot;)</code></pre><p>NumberLong</p><blockquote><p> 默认情况下，mongo shell认为所有的数字为浮点数</p></blockquote><p> NumberLong() 构造器接收字符串参数</p> <pre><code class="hljs shell">NumberLong(&quot;2090845886852&quot;)</code></pre><p> eg.</p><p><img src="/img/mongodb/image-20200915184948876.png" alt="image-20200915184948876"></p><blockquote><p> $inc 用浮点数对’calc’进行递增会使其类型变为浮点数</p><p><img src="/img/mongodb/image-20200915185051155.png" alt="image-20200915185051155"></p></blockquote><p> NumberInt</p><blockquote><p>默认情况下，mongo shell 认为所有的数字为浮点数， NumberInt用来显示构造32位整数</p></blockquote><p> NumberDecimal</p><blockquote><p>mongo shell提供了NumberDecimal（）构造函数来显式指定基于<code>128位</code>的，基于十进制的浮点值，该值能够精确地模拟十进制舍入。此功能适用于处理货币数据的应用程序，例如<code>金融</code>，<code>税收</code>和<code>科学计算</code>。</p></blockquote><p> NumberDecimal() 构造器接收字符串参数</p> <pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> NumberDecimal(<span class="hljs-string">&quot;1000.55&quot;</span>)</span>NumberDecimal(&quot;1000.55&quot;)</code></pre><blockquote><p>NumberDecimal() 构造器,也接受double类型的浮点数，和java 一样会有精度缺失的问题。并且存在隐式转换将双精度转换为15位精度</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> var number = NumberDecimal(1000.55);</span><span class="hljs-meta">&gt;</span><span class="bash"> number</span>NumberDecimal(&quot;1000.55000000000&quot;)</code></pre><p>精度缺失eg.</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> var number = NumberDecimal(9999999.4999999999);</span><span class="hljs-meta">&gt;</span><span class="bash"> number</span>NumberDecimal(&quot;9999999.50000000&quot;)</code></pre></blockquote></li><li><p>比较和排序</p><p>浮点数和其他数字类型进行比较取决于他们的实际值。二进制双精度浮点数的十进制表示只是其近似值不一定完全相等，建议使用NumberDecimal();</p><p>数据集：</p><pre><code class="hljs shell">&#123; &quot;_id&quot; : 1, &quot;val&quot; : NumberDecimal( &quot;9.99&quot; ), &quot;description&quot; : &quot;Decimal&quot; &#125;&#123; &quot;_id&quot; : 2, &quot;val&quot; : 9.99, &quot;description&quot; : &quot;Double&quot; &#125;&#123; &quot;_id&quot; : 3, &quot;val&quot; : 10, &quot;description&quot; : &quot;Double&quot; &#125;&#123; &quot;_id&quot; : 4, &quot;val&quot; : NumberLong(10), &quot;description&quot; : &quot;Long&quot; &#125;&#123; &quot;_id&quot; : 5, &quot;val&quot; : NumberDecimal( &quot;10.0&quot; ), &quot;description&quot; : &quot;Decimal&quot; &#125;</code></pre><p>查询：</p><table><thead><tr><th align="left">Query</th><th align="left">Results</th></tr></thead><tbody><tr><td align="left">{ “val”: 9.99 }</td><td align="left">{ “_id”: 2, “val”: 9.99, “description”: “Double” }</td></tr><tr><td align="left">{ “val”: NumberDecimal( “9.99” ) }</td><td align="left">{ “_id”: 1, “val”: NumberDecimal( “9.99” ), “description”: “Decimal” }</td></tr><tr><td align="left">{ val: 10 }</td><td align="left">{ “_id”: 3, “val”: 10, “description”: “Double” }<br>{ “_id”: 4, “val”: NumberLong(10), “description”: “Long” }<br/>{ “_id”: 5, “val”: NumberDecimal( “10.0” ), “description”: “Decimal” }</td></tr><tr><td align="left">{ val: NumberDecimal( “10” ) }</td><td align="left">{ “_id”: 3, “val”: 10, “description”: “Double” }<br/>{ “_id”: 4, “val”: NumberLong(10), “description”: “Long” }<br/>{ “_id”: 5, “val”: NumberDecimal( “10.0” ), “description”: “Decimal” }</td></tr></tbody></table><p>十进制9.99对应的实际二进制值是不不等于9.99的因此只等查询到Double类型的一条数据；</p><p>十进制10和二进制下的10实际值是一样的，因此可以查询到Double和其他数字类型。</p><blockquote><p>可以用$type查询特定的数据类型的值</p><pre><code class="hljs shell">db.inventory.find( &#123; price: &#123; $type: &quot;decimal&quot; &#125; &#125; )</code></pre></blockquote></li><li><p>数据类型判断：</p><p>instanceof 判断是否为某数据类型 返回true或false</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> number</span>NumberDecimal(&quot;9999999.50000000&quot;)<span class="hljs-meta">&gt;</span><span class="bash"> number instanceof NumberDecimal</span>true<span class="hljs-meta">&gt;</span><span class="bash"> number instanceof NumberLong</span>false</code></pre><p>typeof 返回具体的数据类型</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> typeof number</span>object</code></pre></li></ol><h3 id="快速参考"><a href="#快速参考" class="headerlink" title="快速参考"></a>快速参考</h3><ol><li><p>历史命令</p><blockquote><p>shell 中的上下键，选择历史命令。历史命令放在~/.dbshell文件中。</p></blockquote></li><li><p>命令行参数</p><ul><li><p>–help 查看命令行参数信息<br><img src="/img/mongodb/image-20200915185414200.png" alt="image-20200915185414200"></p><p><img src="/img/mongodb/image-20200915185454123.png" alt="image-20200915185454123"></p></li></ul></li></ol><ul><li><p>–nodb 启动mongo shell,不连接数据库</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ./mongo.exe --nodb</span>MongoDB shell version v4.0.10<span class="hljs-meta">&gt;</span><span class="bash"> db <span class="hljs-comment"># 没连接db</span></span>2020-09-15T16:50:43.941+0800 E QUERY    [js] ReferenceError: db is not defined :@(shell):1:1</code></pre></li><li><p>–shell 和JavaScript脚本一起使用，执行完脚本继续使用mongo shell</p></li></ul><ol start="3"><li><p>帮助相关方法命令</p><ul><li><p>help 查看帮助信息</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">help</span></span>   db.help()                    help on db methods   db.mycoll.help()             help on collection methods   sh.help()                    sharding helpers   rs.help()                    replica set helpers   help admin                   administrative help   help connect                 connecting to a db help   help keys                    key shortcuts   help misc                    misc things to know   help mr                      mapreduce   show dbs                     show database names   show collections             show collections in current database   show users                   show users in current database   show profile                 show most recent system.profile entries with time &gt;= 1ms   show logs                    show the accessible logger names   show log [name]              prints out the last segment of log in memory, &#x27;global&#x27; is default   use &lt;db_name&gt;                set current database   db.foo.find()                list objects in collection foo   db.foo.find( &#123; a : 1 &#125; )     list objects in foo where a == 1   it                           result of the last line evaluated; use to further iterate   DBQuery.shellBatchSize = x   set default number of items to display on shell   exit                         quit the mongo shell</code></pre></li><li><p>db.help() 查看db相关的方法</p><pre><code class="hljs shell"> db.help()DB methods:   db.adminCommand(nameOrDocument) - switches to &#x27;admin&#x27; db, and runs command [just calls db.runCommand(...)]   db.aggregate([pipeline], &#123;options&#125;) - performs a collectionless aggregation on this database; returns a cursor   db.auth(username, password) # 登录   db.cloneDatabase(fromhost) - deprecated   db.commandHelp(name) returns the help for the command # 命令帮助   db.copyDatabase(fromdb, todb, fromhost) - deprecated   db.createCollection(name, &#123;size: ..., capped: ..., max: ...&#125;)   db.createView(name, viewOn, [&#123;$operator: &#123;...&#125;&#125;, ...], &#123;viewOptions&#125;)   db.createUser(userDocument) # 创建用户   db.currentOp() displays currently executing operations in the db   db.dropDatabase() # 删除数据库   ...</code></pre></li><li><p>db.&lt;collectionName&gt;.help() 集合相关的方法帮助 可以是存在的集合也可以是不存在的集合</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> show collections</span>filesfiles.chunksfiles.files</code></pre><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> db.files.help()</span>DBCollection help   db.files.find().help() - show DBCursor help   db.files.bulkWrite( operations, &lt;optional params&gt; ) - bulk execute write operations, optional parameters are: w, wtimeout, j   db.files.count( query = &#123;&#125;, &lt;optional params&gt; ) - count the number of documents that matches the query, optional parameters are: limit, skip, hint, maxTimeMS   db.files.countDocuments( query = &#123;&#125;, &lt;optional params&gt; ) - count the number of documents that matches the query, optional parameters are: limit, skip, hint, maxTimeMS   ...</code></pre><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> db.f.help()</span>DBCollection help   db.f.find().help() - show DBCursor help   db.f.bulkWrite( operations, &lt;optional params&gt; ) - bulk execute write operations, optional parameters are: w, wtimeout, j   db.f.count( query = &#123;&#125;, &lt;optional params&gt; ) - count the number of documents that matches the query, optional parameters are: limit, skip, hint, maxTimeMS   db.f.countDocuments( query = &#123;&#125;, &lt;optional params&gt; ) - count the number of documents that matches the query, optional parameters are: limit, skip, hint, maxTimeMS   db.f.estimatedDocumentCount( &lt;optional params&gt; ) - estimate the document count using collection metadata, optional parameters are: maxTimeMS   ...</code></pre></li><li><p>show dbs 展示server上的所有db</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> show dbs</span>admin   0.000GBconfig  0.000GBfiles   0.013GBlocal   0.000GBtest    0.000GB</code></pre></li><li><p>use &lt;db&gt; 切换当前db</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> db</span>files<span class="hljs-meta">&gt;</span><span class="bash"> use <span class="hljs-built_in">test</span></span>switched to db test<span class="hljs-meta">&gt;</span><span class="bash"> db</span>test</code></pre></li><li><p>show collections 展示当前db下的所有集合</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> show collections</span>filesfiles.chunksfiles.files</code></pre></li><li><p>show users 展示当前库的用户</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> show dbs</span>admin   0.000GBconfig  0.000GBfiles   0.013GBlocal   0.000GBtest    0.000GB<span class="hljs-meta">&gt;</span><span class="bash"> use admin</span>switched to db admin<span class="hljs-meta">&gt;</span><span class="bash"> show users</span>&#123;   &quot;_id&quot; : &quot;admin.root&quot;,   &quot;userId&quot; : UUID(&quot;1198568b-e718-4c8c-b91b-e551de9d819c&quot;),   &quot;user&quot; : &quot;root&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;roles&quot; : [           &#123;                   &quot;role&quot; : &quot;root&quot;,                   &quot;db&quot; : &quot;admin&quot;           &#125;   ],   &quot;mechanisms&quot; : [           &quot;SCRAM-SHA-1&quot;,           &quot;SCRAM-SHA-256&quot;   ]&#125;</code></pre></li><li><p>show  roles 展示当前库的所有角色包括内置和自定义的</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> show roles</span>&#123;   &quot;role&quot; : &quot;__queryableBackup&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;__system&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;backup&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;clusterAdmin&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;clusterManager&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;clusterMonitor&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;dbAdmin&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;dbAdminAnyDatabase&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;dbOwner&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;enableSharding&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;hostManager&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;read&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;readAnyDatabase&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;readWrite&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;readWriteAnyDatabase&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;restore&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;root&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;userAdmin&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;&#123;   &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,   &quot;db&quot; : &quot;admin&quot;,   &quot;isBuiltin&quot; : true,   &quot;roles&quot; : [ ],   &quot;inheritedRoles&quot; : [ ]&#125;</code></pre></li></ul></li></ol><ul><li>show profile 打印5个耗时大于1毫秒的最新的更新操作</li><li>show databases 打印可用数据库</li><li>load() 加载脚本文件</li></ul><ol start="4"><li><p>JavaScript 常用方法</p><blockquote><p>db 参数是当前数据库，默认是test，可以用use命令切换当前库</p></blockquote><ul><li>db.auth() 安全模式下 验证用户</li><li>coll = db.&lt;collection&gt;  获取集合</li><li>db.collection.find() 查询当前集合的所有文档</li><li>db.collection.insertOne() 当前集合插入一条记录</li><li>db.collection.updateOne() 当前集合更新一条记录</li><li>db.collection.updateMany() 当前集合批量更新</li><li>db.collection.save() 当前集合插入新记录或更新已存在的记录</li><li>db.collection.deleteOne() 当前集合删除一条记录</li><li>db.collection.deleteMany() 当前集合删除多条记录</li><li>db.collection.drop() 删除当前集合</li><li>db.collection.createIndex() 给当前集合建索引，如果索引已经存在了，则操作无效</li><li>db.getSiblingDB() 用当前连接去连接另一个db</li></ul></li><li><p>查询</p><ul><li><p>db.collection.find(&lt;query&gt;)<br>查询与&lt;query&gt;参数相匹配的数据，如果&lt;query&gt;为空，则返回全部数据。类比SQL中 where子句。</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find()</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089c1bdfef17fa641366e&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 15 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5f6089cebdfef17fa641366f&quot;), &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 16 &#125;<span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find(&#123;name:<span class="hljs-string">&#x27;lisi&#x27;</span>&#125;)</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089cebdfef17fa641366f&quot;), &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 16 &#125;</code></pre></li><li><p>db.collection.find(&lt;query&gt;,&lt;projection&gt;)</p><p>&lt;projection&gt;返回字段，类比SQL中的SELECT子句。</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find(&#123;name:<span class="hljs-string">&#x27;lisi&#x27;</span>&#125;,&#123;name:<span class="hljs-literal">true</span>&#125;)</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089cebdfef17fa641366f&quot;), &quot;name&quot; : &quot;lisi&quot; &#125;<span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find(&#123;name:<span class="hljs-string">&#x27;lisi&#x27;</span>&#125;,&#123;age:<span class="hljs-literal">true</span>&#125;)</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089cebdfef17fa641366f&quot;), &quot;age&quot; : 16 &#125;<span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find(&#123;name:<span class="hljs-string">&#x27;lisi&#x27;</span>&#125;,&#123;age:<span class="hljs-literal">true</span>,name:<span class="hljs-literal">true</span>&#125;)</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089cebdfef17fa641366f&quot;), &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 16 &#125;</code></pre></li><li><p>db.collection.find().sort(&lt;sort order&gt;)<br>结果集排序，sort按照什么字段排序，order取值 1和-1，1正序，-1倒序。</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find().sort(&#123;age:1&#125;)</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089c1bdfef17fa641366e&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 15 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5f6089cebdfef17fa641366f&quot;), &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 16 &#125;<span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find().sort(&#123;age:-1&#125;)</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089cebdfef17fa641366f&quot;), &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 16 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5f6089c1bdfef17fa641366e&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 15 &#125;</code></pre></li><li><p>db.collection.find().limit(&lt;n&gt;) 限制返回结果集的条数</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find().<span class="hljs-built_in">limit</span>(1)</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089c1bdfef17fa641366e&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 15 &#125;<span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find().<span class="hljs-built_in">limit</span>(2)</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089c1bdfef17fa641366e&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 15 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5f6089cebdfef17fa641366f&quot;), &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 16 &#125;</code></pre></li><li><p>db.collection.find().skip(&lt;n&gt;) 跳过几条</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find()</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089c1bdfef17fa641366e&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 15 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5f6089cebdfef17fa641366f&quot;), &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 16 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5f608d3bbdfef17fa6413670&quot;), &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 17 &#125;<span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find().skip(1)</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089cebdfef17fa641366f&quot;), &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 16 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5f608d3bbdfef17fa6413670&quot;), &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 17 &#125;<span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find().skip(2)</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f608d3bbdfef17fa6413670&quot;), &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 17 &#125;</code></pre></li></ul></li></ol><ul><li><p>db.collection.find().count() 返回记录数</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find()</span>&#123; &quot;_id&quot; : ObjectId(&quot;5f6089c1bdfef17fa641366e&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 15 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5f6089cebdfef17fa641366f&quot;), &quot;name&quot; : &quot;lisi&quot;, &quot;age&quot; : 16 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5f608d3bbdfef17fa6413670&quot;), &quot;name&quot; : &quot;wangwu&quot;, &quot;age&quot; : 17 &#125;<span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find().count()</span>3<span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.find(&#123;name:<span class="hljs-string">&#x27;zhangsan&#x27;</span>&#125;).count()</span>1</code></pre></li></ul><ul><li><p>db.collection.findOne(&lt;query&gt;) 返回单独一条 不传&lt;query&gt;则返回第一条</p><pre><code class="hljs reasonml">&gt; db.coll1.find<span class="hljs-literal">()</span>&#123; <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-constructor">ObjectId(<span class="hljs-string">&quot;5f6089c1bdfef17fa641366e&quot;</span>)</span>, <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">15</span> &#125;&#123; <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-constructor">ObjectId(<span class="hljs-string">&quot;5f6089cebdfef17fa641366f&quot;</span>)</span>, <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">16</span> &#125;&#123; <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-constructor">ObjectId(<span class="hljs-string">&quot;5f608d3bbdfef17fa6413670&quot;</span>)</span>, <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;wangwu&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">17</span> &#125;&gt; db.coll1.find<span class="hljs-constructor">One()</span>&#123;   <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-constructor">ObjectId(<span class="hljs-string">&quot;5f6089c1bdfef17fa641366e&quot;</span>)</span>,   <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;zhangsan&quot;</span>,   <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">15</span>&#125;&gt; db.coll1.find<span class="hljs-constructor">One(&#123;<span class="hljs-params">name</span>:&#x27;<span class="hljs-params">lisi</span>&#x27;&#125;)</span>&#123;   <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-constructor">ObjectId(<span class="hljs-string">&quot;5f6089cebdfef17fa641366f&quot;</span>)</span>,   <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;lisi&quot;</span>,   <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">16</span>&#125;</code></pre></li></ul><ul><li><p>db.fromCollection.renameCollection(&lt;toCollectionName&gt;) 修改集合名</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> show collections</span>coll1collection<span class="hljs-meta">&gt;</span><span class="bash"> db.coll</span>db.coll1       db.collection<span class="hljs-meta">&gt;</span><span class="bash"> db.coll1.renameCollection(<span class="hljs-string">&#x27;coll2&#x27;</span>)</span>&#123; &quot;ok&quot; : 1 &#125;<span class="hljs-meta">&gt;</span><span class="bash"> show collections</span>coll2collection</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DB</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ag-命令行查找工具</title>
    <link href="/2020/09/02/linux/ag/ag/"/>
    <url>/2020/09/02/linux/ag/ag/</url>
    
    <content type="html"><![CDATA[<h1 id="ag-命令行查找工具"><a href="#ag-命令行查找工具" class="headerlink" title="ag-命令行查找工具"></a>ag-命令行查找工具</h1><blockquote><p>安装：</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">sudo apt-get install silversearcher-ag</span></code></pre></blockquote><pre><code class="hljs shell">Usage: ag [FILE-TYPE] [OPTIONS] PATTERN [PATH]  Recursively search for PATTERN in PATH. # 递归查询  Like grep or ack, but faster. # 比grep ack更快Example:  ag -i foo /bar/Output Options:     --ackmate            Print results in AckMate-parseable format # 以AckMate可以解析的格式输出  -A --after [LINES]      Print lines after match (Default: 2) # 匹配到后 打印匹配到的行的后几行  默认2行  -B --before [LINES]     Print lines before match (Default: 2)# 匹配到后 打印匹配到的行的前几行  默认2行     --[no]break          Print newlines between matches in different files                          (Enabled by default) # 不同文件匹配到后是否打印空行 默认启用  -c --count              Only print the number of matches in each file. # 打印不同文件匹配数                           (This often differs from the number of matching lines) # 匹配数 不是 匹配行数     --[no]color          Print color codes in results (Enabled by default) # 彩色打印匹配结果 默认开启     --color-line-number  Color codes for line numbers (Default: 1;33) # 行号颜色 默认1;33     --color-match        Color codes for result match numbers (Default: 30;43) # 匹配结果颜色 默认30;43     --color-path         Color codes for path names (Default: 1;32) #路径颜色默认 1;32     --column             Print column numbers in results # 打印列号     --[no]filename       Print file names (Enabled unless searching a single file)# 打印文件名 默认搜索多个文件时候开启  -H --[no]heading        Print file names before each file&#x27;s matches #每个文件搜索前都打印文件名                          (Enabled by default) # 默认开启  -C --context [LINES]    Print lines before and after matches (Default: 2)# 打印匹配到的结果行的前后几行 默认为2     --[no]group          Same as --[no]break --[no]heading # 类似 --[no]break --[no]heading  -g --filename-pattern PATTERN                          Print filenames matching PATTERN # 搜索含有PATTERN的文件名  -l --files-with-matches Only print filenames that contain matches                          (don&#x27;t print the matching lines) # 只打印匹配到的文件名 不会打印具体匹配到的行  -L --files-without-matches                          Only print filenames that don&#x27;t contain matches # 只打印未匹配到的文件名     --print-all-files    Print headings for all files searched, even those that                          don&#x27;t contain matches # 匹配结果前打印文件名 没有匹配到的文件也打印     --[no]numbers        Print line numbers. Default is to omit line numbers                          when searching streams # 打印行号 默认忽略？？？  -o --only-matching      Prints only the matching part of the lines # 只打印匹配的部分     --print-long-lines   Print matches on very long lines (Default: &gt;2k characters)     --passthrough        When searching a stream, print all lines even if they                          don&#x27;t match     --silent             Suppress all log messages, including errors     --stats              Print stats (files scanned, time taken, etc.) # 打印状态     --stats-only         Print stats and nothing else. # 只打印状态                          (Same as --count when searching a single file)      --vimgrep            Print results like vim&#x27;s :vimgrep /pattern/g would                          (it reports every match on the line) # 打印格式和vimgrep一样  -0 --null --print0      Separate filenames with null (for &#x27;xargs -0&#x27;)Search Options:  -a --all-types          Search all files (doesn&#x27;t include hidden files                          or patterns from ignore files) # 查询所有文件 不包括隐藏文件和忽略的文件  -D --debug              Ridiculous debugging (probably not useful) # 会输出debug信息     --depth NUM          Search up to NUM directories deep (Default: 25)# 递归深度  -f --follow             Follow symlinks # 遵循符号链接  -F --fixed-strings      Alias for --literal for compatibility with grep # --literal 别名 与grep兼容  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN # 限制搜索范围为 文件名含有PATTERN的文件      --hidden             Search hidden files (obeys .*ignore files) # 搜索包含隐藏文件（.*）  -i --ignore-case        Match case insensitively # 不区分大小写     --ignore PATTERN     Ignore files/directories matching PATTERN # 忽略含有PATTERN的文件或文件夹                          (literal file/directory names also allowed)     --ignore-dir NAME    Alias for --ignore for compatibility with ack.# --ignore别名 与ack兼容  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)     --one-device         Don&#x27;t follow links to other devices. # 不遵循链接到其他驱动 只查当前驱动文件  -p --path-to-ignore STRING                          Use .ignore file at STRING  -Q --literal            Don&#x27;t parse PATTERN as a regular expression # 不再将pattern解析为正则表达式  -s --case-sensitive     Match case sensitively # 区分大小写  -S --smart-case         Match case insensitively unless PATTERN contains                           uppercase characters (Enabled by default)# 除非PATTERN包含大写字母 否则不区分大小写 默认启用     --search-binary      Search binary files for matches # 二进制文件中匹配  -t --all-text           Search all text files (doesn&#x27;t include hidden files) #搜索所有文本文件（不包括隐藏文件）  -u --unrestricted       Search all files (ignore .ignore, .gitignore, etc.;                          searches binary and hidden files as well)# 查询所有文件  -U --skip-vcs-ignores   Ignore VCS ignore files                          (.gitignore, .hgignore; still obey .ignore)# 忽略vcs的忽略文件  -v --invert-match       # 反向匹配  -w --word-regexp        Only match whole words #整个单词匹配  -W --width NUM          Truncate match lines after NUM characters # 匹配的行信息在num个字符后截断  -z --search-zip         Search contents of compressed (e.g., gzip) files #压缩文件中匹配File Types:The search can be restricted to certain types of files. Example:  ag --html needle #指定搜索的文件类型为html  - Searches for &#x27;needle&#x27; in files with suffix .htm, .html, .shtml or .xhtml.For a list of supported file types run:  ag --list-file-types # 查看ag支持的文件类型ag was originally created by Geoff Greer. More information (and the latest release)can be found at http://geoff.greer.fm/ag</code></pre><ul><li><p>测试文件</p><pre><code class="hljs shell">~/agtest ❯   ag --help &gt; text   28s 06:38:37 PM~/agtest ❯   man ls &gt; lstest   28s 06:39:37 PM</code></pre></li></ul><h2 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h2><h3 id="A-–after-LINES"><a href="#A-–after-LINES" class="headerlink" title="-A –after [LINES]"></a>-A –after [LINES]</h3><p>Print lines after match (Default: 2) </p><p>匹配到后 打印匹配到的行的后几行  默认2行</p><pre><code class="hljs shell">~ ❯ ag -A after ./agtest                                                                09:18:35 AMagtest/text #文件路径 文件名12:  -A --after [LINES]      Print lines after match (Default: 2)13-  -B --before [LINES]     Print lines before match (Default: 2)14-     --[no]break          Print newlines between matches in different files--26:  -C --context [LINES]    Print lines before and after matches (Default: 2)27-     --[no]group          Same as --[no]break --[no]heading28-  -g --filename-pattern PATTERN--63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)64-     --one-device         Don&#x27;t follow links to other devices.65-  -p --path-to-ignore STRING--79:  -W --width NUM          Truncate match lines after NUM characters80-  -z --search-zip         Search contents of compressed (e.g., gzip) files81-</code></pre><pre><code class="hljs shell">~ ❯ ag -A 3 after ./agtest                                                              09:18:48 AMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)13-  -B --before [LINES]     Print lines before match (Default: 2)14-     --[no]break          Print newlines between matches in different files15-                          (Enabled by default)--26:  -C --context [LINES]    Print lines before and after matches (Default: 2)27-     --[no]group          Same as --[no]break --[no]heading28-  -g --filename-pattern PATTERN29-                          Print filenames matching PATTERN--63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)64-     --one-device         Don&#x27;t follow links to other devices.65-  -p --path-to-ignore STRING66-                          Use .ignore file at STRING--79:  -W --width NUM          Truncate match lines after NUM characters80-  -z --search-zip         Search contents of compressed (e.g., gzip) files81-82-File Types:</code></pre><h3 id="B-–before-LINES"><a href="#B-–before-LINES" class="headerlink" title="-B –before [LINES]"></a>-B –before [LINES]</h3><p>Print lines before match (Default: 2)</p><p>匹配到后 打印匹配到的行的前几行  默认2行</p><pre><code class="hljs shell">~ ❯ ag -B after ./agtest                                                                09:38:41 AMagtest/text10-Output Options:11-     --ackmate            Print results in AckMate-parseable format12:  -A --after [LINES]      Print lines after match (Default: 2)--24-  -H --[no]heading        Print file names before each file&#x27;s matches25-                          (Enabled by default)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)--61-                          (literal file/directory names also allowed)62-     --ignore-dir NAME    Alias for --ignore for compatibility with ack.63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)--77-  -v --invert-match78-  -w --word-regexp        Only match whole words79:  -W --width NUM          Truncate match lines after NUM characters</code></pre><pre><code class="hljs shell">~ ❯ ag -B 3 after ./agtest                                                              09:38:56 AMagtest/text9-10-Output Options:11-     --ackmate            Print results in AckMate-parseable format12:  -A --after [LINES]      Print lines after match (Default: 2)--23-     --[no]filename       Print file names (Enabled unless searching a single file)24-  -H --[no]heading        Print file names before each file&#x27;s matches25-                          (Enabled by default)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)--60-     --ignore PATTERN     Ignore files/directories matching PATTERN61-                          (literal file/directory names also allowed)62-     --ignore-dir NAME    Alias for --ignore for compatibility with ack.63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)--76-                          (.gitignore, .hgignore; still obey .ignore)77-  -v --invert-match78-  -w --word-regexp        Only match whole words79:  -W --width NUM          Truncate match lines after NUM characters</code></pre><h3 id="–-no-break"><a href="#–-no-break" class="headerlink" title="–[no]break"></a>–[no]break</h3><p> Print newlines between matches in different files  (Enabled by default)</p><p>不同文件匹配到结果之间是否打印空行 默认开启</p><pre><code class="hljs shell">~ ❯ ag --break do ./agtest                                                              09:48:35 AMagtest/lstest16:              do not ignore entries starting with .19:              do not list implied . and ..32:              do not list implied entries ending with ~50:       -f     do not sort, enable -aU, disable -ls --color56:              likewise, except do not append &#x27;*&#x27;65:       -g     like -l, but do not list owner74:              in a long listing, don&#x27;t print group names90:              do not list implied entries matching shell PATTERN (overridden by -a or -A)103:              do not list implied entries matching shell PATTERN123:       -o     like -l, but do not list group information136:              enclose entry names in double quotes174:       -U     do not sort; list entries in directory order230:       Full documentation at: &lt;https://www.gnu.org/software/coreutils/ls&gt;<span class="hljs-meta">#</span><span class="bash"> 空行</span>agtest/text31:                          (don&#x27;t print the matching lines)33:                          Only print filenames that don&#x27;t contain matches35:                          don&#x27;t contain matches41:                          don&#x27;t match51:  -a --all-types          Search all files (doesn&#x27;t include hidden files64:     --one-device         Don&#x27;t follow links to other devices.67:  -Q --literal            Don&#x27;t parse PATTERN as a regular expression72:  -t --all-text           Search all text files (doesn&#x27;t include hidden files)</code></pre><pre><code class="hljs shell">~ ❯  ag --nobreak do ./agtest                                                           09:48:46 AMagtest/text31:                          (don&#x27;t print the matching lines)33:                          Only print filenames that don&#x27;t contain matches35:                          don&#x27;t contain matches41:                          don&#x27;t match51:  -a --all-types          Search all files (doesn&#x27;t include hidden files64:     --one-device         Don&#x27;t follow links to other devices.67:  -Q --literal            Don&#x27;t parse PATTERN as a regular expression72:  -t --all-text           Search all text files (doesn&#x27;t include hidden files)agtest/lstest16:              do not ignore entries starting with .19:              do not list implied . and ..32:              do not list implied entries ending with ~50:       -f     do not sort, enable -aU, disable -ls --color56:              likewise, except do not append &#x27;*&#x27;65:       -g     like -l, but do not list owner74:              in a long listing, don&#x27;t print group names90:              do not list implied entries matching shell PATTERN (overridden by -a or -A)103:              do not list implied entries matching shell PATTERN123:       -o     like -l, but do not list group information136:              enclose entry names in double quotes174:       -U     do not sort; list entries in directory order230:       Full documentation at: &lt;https://www.gnu.org/software/coreutils/ls&gt;</code></pre><h3 id="c-–count"><a href="#c-–count" class="headerlink" title="-c –count"></a>-c –count</h3><p>Only print the number of matches in each file. (This often differs from the number of matching lines)</p><p>打印不同文件中匹配数  匹配数不是匹配行数</p><pre><code class="hljs shell">~ ❯ ag do ./agtest                                                                      09:51:54 AMagtest/lstest16:              do not ignore entries starting with .19:              do not list implied . and ..32:              do not list implied entries ending with ~50:       -f     do not sort, enable -aU, disable -ls --color56:              likewise, except do not append &#x27;*&#x27;65:       -g     like -l, but do not list owner74:              in a long listing, don&#x27;t print group names90:              do not list implied entries matching shell PATTERN (overridden by -a or -A)103:              do not list implied entries matching shell PATTERN123:       -o     like -l, but do not list group information136:              enclose entry names in double quotes174:       -U     do not sort; list entries in directory order230:       Full documentation at: &lt;https://www.gnu.org/software/coreutils/ls&gt;agtest/text31:                          (don&#x27;t print the matching lines)33:                          Only print filenames that don&#x27;t contain matches35:                          don&#x27;t contain matches41:                          don&#x27;t match51:  -a --all-types          Search all files (doesn&#x27;t include hidden files64:     --one-device         Don&#x27;t follow links to other devices.67:  -Q --literal            Don&#x27;t parse PATTERN as a regular expression72:  -t --all-text           Search all text files (doesn&#x27;t include hidden files)~ ❯ ag -c do ./agtest                                                                   09:55:54 AMagtest/text:8agtest/lstest:13</code></pre><h3 id="–-no-color"><a href="#–-no-color" class="headerlink" title="–[no]color"></a>–[no]color</h3><p> Print color codes in results (Enabled by default) </p><p>彩色打印匹配结果 默认开启</p><p><img src="/img/linux/ag/image-20200903100033965.png" alt="image-20200903100033965"></p><ul><li><p><code>--color-line-number</code>  </p><p>Color codes for line numbers (Default: 1;33) </p><p>行号颜色 默认1;33</p></li><li><p><code>--color-match</code>    </p><p>Color codes for result match numbers (Default: 30;43) </p><p>匹配结果颜色 默认30;43</p></li><li><p><code>--color-path</code>  </p><p>Color codes for path names (Default: 1;32) </p><p>路径颜色默认 1;32</p></li></ul><p><img src="/img/linux/ag/image-20200903103836432.png" alt="image-20200903103836432"></p><p><img src="/img/linux/ag/image-20200903104026933.png" alt="image-20200903104026933"></p><h3 id="–column"><a href="#–column" class="headerlink" title="–column"></a>–column</h3><p>Print column numbers in results</p><p>打印列号</p><pre><code class="hljs shell">~ ❯ ag --column after ./agtest                                                          10:40:00 AMagtest/text12:8:  -A --after [LINES]      Print lines after match (Default: 2)26:50:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:51:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:48:  -W --width NUM          Truncate match lines after NUM characters</code></pre><h3 id="–-no-filename"><a href="#–-no-filename" class="headerlink" title="–[no]filename"></a>–[no]filename</h3><p>Print file names (Enabled unless searching a single file)</p><p>打印文件名 默认多个文件时候开启</p><pre><code class="hljs shell">~ ❯ ag after ./agtest                                                                   10:46:56 AMagtest/text # 文件夹搜索 默认打印文件名12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag after ./agtest/text    #单个文件搜索默认不打印文件名                                  10:47:02 AM12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters</code></pre><pre><code class="hljs shell">~ ❯ ag --filename after  ./agtest/text                                                  10:50:11 AM12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag --filename after  ./agtest                                                       10:50:21 AMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag --nofilename after  ./agtest                                                     10:50:33 AM  -A --after [LINES]      Print lines after match (Default: 2)  -C --context [LINES]    Print lines before and after matches (Default: 2)  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)  -W --width NUM          Truncate match lines after NUM characters</code></pre><blockquote><p>–filename 无法改变默认的单个文件搜索规则 使其显示文件名 如果要想显示单个文件文件名 则查看 -H 参数</p><p>–nofilename可以使多个文件搜索时候 不再显示文件名</p></blockquote><h3 id="H-–-no-heading"><a href="#H-–-no-heading" class="headerlink" title="-H –[no]heading"></a>-H –[no]heading</h3><p>Print file names before each file’s matches  (Enabled by default)<br>每个文件搜索前都打印文件名  默认开启</p><pre><code class="hljs shell">~ ❯ ag -H after  ./agtest/text                                                          10:50:38 AMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag -H after  ./agtest                                                               10:52:00 AMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag --noheading after  ./agtest                                                      10:56:47 AMagtest/text:12:  -A --after [LINES]      Print lines after match (Default: 2)agtest/text:26:  -C --context [LINES]    Print lines before and after matches (Default: 2)agtest/text:63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)agtest/text:79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag --noheading after  ./agtest/text                                                 10:56:59 AMagtest/text:12:  -A --after [LINES]      Print lines after match (Default: 2)agtest/text:26:  -C --context [LINES]    Print lines before and after matches (Default: 2)agtest/text:63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)agtest/text:79:  -W --width NUM          Truncate match lines after NUM characters</code></pre><h3 id="C-–context-LINES"><a href="#C-–context-LINES" class="headerlink" title="-C –context [LINES]"></a>-C –context [LINES]</h3><p>Print lines before and after matches (Default: 2)</p><p>打印匹配到的结果行的前后几行 默认为2</p><pre><code class="hljs shell">~ ❯ ag -C after ./agtest                                                                11:03:15 AMagtest/text10-Output Options:11-     --ackmate            Print results in AckMate-parseable format12:  -A --after [LINES]      Print lines after match (Default: 2)13-  -B --before [LINES]     Print lines before match (Default: 2)14-     --[no]break          Print newlines between matches in different files--24-  -H --[no]heading        Print file names before each file&#x27;s matches25-                          (Enabled by default)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)27-     --[no]group          Same as --[no]break --[no]heading28-  -g --filename-pattern PATTERN--61-                          (literal file/directory names also allowed)62-     --ignore-dir NAME    Alias for --ignore for compatibility with ack.63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)64-     --one-device         Don&#x27;t follow links to other devices.65-  -p --path-to-ignore STRING--77-  -v --invert-match78-  -w --word-regexp        Only match whole words79:  -W --width NUM          Truncate match lines after NUM characters80-  -z --search-zip         Search contents of compressed (e.g., gzip) files81-~ ❯ ag --context=1 after ./agtest                                                       11:03:25 AMagtest/text11-     --ackmate            Print results in AckMate-parseable format12:  -A --after [LINES]      Print lines after match (Default: 2)13-  -B --before [LINES]     Print lines before match (Default: 2)--25-                          (Enabled by default)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)27-     --[no]group          Same as --[no]break --[no]heading--62-     --ignore-dir NAME    Alias for --ignore for compatibility with ack.63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)64-     --one-device         Don&#x27;t follow links to other devices.--78-  -w --word-regexp        Only match whole words79:  -W --width NUM          Truncate match lines after NUM characters80-  -z --search-zip         Search contents of compressed (e.g., gzip) files</code></pre><h3 id="–-no-group"><a href="#–-no-group" class="headerlink" title="–[no]group"></a>–[no]group</h3><p>Same as –[no]break –[no]heading </p><p>类似 –[no]break –[no]heading</p><pre><code class="hljs shell">~ ❯ ag --group after ./agtest                                                           11:03:28 AMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag --nogroup after ./agtest                                                         11:04:43 AMagtest/text:12:  -A --after [LINES]      Print lines after match (Default: 2)agtest/text:26:  -C --context [LINES]    Print lines before and after matches (Default: 2)agtest/text:63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)agtest/text:79:  -W --width NUM          Truncate match lines after NUM characters</code></pre><h3 id="g-–filename-pattern-PATTERN"><a href="#g-–filename-pattern-PATTERN" class="headerlink" title="-g –filename-pattern PATTERN"></a>-g –filename-pattern PATTERN</h3><p>Print filenames matching PATTERN</p><p>搜索含有PATTERN的文件名</p><pre><code class="hljs shell">~ ❯ ag -g test ./agtest                                                                 11:11:44 AMagtest/textagtest/lstest~ ❯ ag -g text ./agtest                                                                 11:11:58 AMagtest/text</code></pre><blockquote><p>匹配的是路径中是否含有PATTERN</p></blockquote><h3 id="l-–files-with-matches"><a href="#l-–files-with-matches" class="headerlink" title="-l –files-with-matches"></a>-l –files-with-matches</h3><p>Only print filenames that contain matches (don’t print the matching lines) </p><p>只打印匹配到的文件名 不会打印具体匹配到的行</p><pre><code class="hljs shell">~ ❯ ag -l after ./agtest                                                                11:12:08 AMagtest/text</code></pre><h3 id="L-–files-without-matches"><a href="#L-–files-without-matches" class="headerlink" title="-L –files-without-matches"></a>-L –files-without-matches</h3><p>Only print filenames that don’t contain matches </p><p>只打印未匹配到的文件名</p><pre><code class="hljs shell">~ ❯ ag -L after ./agtest                                                                11:16:29 AMagtest/lstest</code></pre><h3 id="–print-all-files"><a href="#–print-all-files" class="headerlink" title="–print-all-files"></a>–print-all-files</h3><p>Print headings for all files searched, even those that don’t contain matches </p><p> 匹配结果前打印文件名 没有匹配到的文件也打印</p><pre><code class="hljs shell">~ ❯ ag --print-all-files after ./agtest                                                 11:17:32 AMagtest/lstestagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters</code></pre><h3 id="–-no-numbers"><a href="#–-no-numbers" class="headerlink" title="–[no]numbers"></a>–[no]numbers</h3><p>Print line numbers. Default is to omit line numbers when searching streams</p><p>打印行号 默认忽略？？？</p><pre><code class="hljs shell">~ ❯ ag after ./agtest                                                                   11:30:39 AMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag --number after ./agtest                                                          11:31:27 AMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag --nonumber after ./agtest                                                        11:31:33 AMagtest/text  -A --after [LINES]      Print lines after match (Default: 2)  -C --context [LINES]    Print lines before and after matches (Default: 2)  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)  -W --width NUM          Truncate match lines after NUM characters</code></pre><h3 id="o-–only-matching"><a href="#o-–only-matching" class="headerlink" title="-o –only-matching"></a>-o –only-matching</h3><p>Prints only the matching part of the lines </p><p>只打印匹配的部分</p><pre><code class="hljs shell">~ ❯ ag after ./agtest                                                                   11:31:40 AMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag -o after ./agtest                                                                11:42:03 AMagtest/text12:after12:after26:after63:after79:after</code></pre><h3 id="–print-long-lines"><a href="#–print-long-lines" class="headerlink" title="–print-long-lines"></a>–print-long-lines</h3><p>Print matches on very long lines (Default: &gt;2k characters)</p><pre><code class="hljs shell">~ ❯ ag --print-long-lines af ./agtest                                                   11:47:15 AMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters</code></pre><h3 id="–stats"><a href="#–stats" class="headerlink" title="–stats"></a>–stats</h3><p>Print stats (files scanned, time taken, etc.)</p><p>打印状态</p><pre><code class="hljs shell">~ ❯ ag --stats after ./agtest                                                           01:57:52 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters5 matches1 files contained matches2 files searched13025 bytes searched0.000971 seconds</code></pre><h3 id="–stats-only"><a href="#–stats-only" class="headerlink" title="–stats-only"></a>–stats-only</h3><p>Print stats and nothing else. </p><p>只打印状态</p><pre><code class="hljs shell">~ ❯ ag --stats-only after ./agtest                                                      01:59:22 PM5 matches1 files contained matches2 files searched13025 bytes searched0.001526 seconds</code></pre><h3 id="–vimgrep"><a href="#–vimgrep" class="headerlink" title="–vimgrep"></a>–vimgrep</h3><p>Print results like vim’s :vimgrep /pattern/g would  (it reports every match on the line) </p><p>打印格式和vimgrep一样</p><pre><code class="hljs shell">~ ❯ ag --vimgrep after ./agtest                                                         01:59:57 PMagtest/text:12:8:  -A --after [LINES]      Print lines after match (Default: 2)agtest/text:12:39:  -A --after [LINES]      Print lines after match (Default: 2)agtest/text:26:50:  -C --context [LINES]    Print lines before and after matches (Default: 2)agtest/text:63:51:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)agtest/text:79:48:  -W --width NUM          Truncate match lines after NUM characters</code></pre><h2 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a>查询参数</h2><h3 id="a-–all-types"><a href="#a-–all-types" class="headerlink" title="-a –all-types"></a>-a –all-types</h3><p>Search all files (doesn’t include hidden files or patterns from ignore files) </p><p>查询所有文件 不包括隐藏文件或 忽略文件模式</p><pre><code class="hljs shell">~/agtest ❯ ls -la                                                                       01:37:55 PMtotal 28drwxr-xr-x  2 chen chen 4096 Sep  4 09:40 .drwxr-xr-x 19 chen chen 4096 Sep  4 13:37 ..-rw-r--r--  1 chen chen 2990 Sep  4 09:39 .mvtest-rw-r--r--  1 chen chen 8075 Sep  3 09:47 lstest-rw-r--r--  1 chen chen 4950 Sep  2 18:42 text~ ❯ ag -a name ./agtest                                                                 01:38:20 PMagtest/text21:     --color-path         Color codes for path names (Default: 1;32)23:     --[no]filename       Print file names (Enabled unless searching a single file)24:  -H --[no]heading        Print file names before each file&#x27;s matches28:  -g --filename-pattern PATTERN29:                          Print filenames matching PATTERN30:  -l --files-with-matches Only print filenames that contain matches33:                          Only print filenames that don&#x27;t contain matches48:  -0 --null --print0      Separate filenames with null (for &#x27;xargs -0&#x27;)57:  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN61:                          (literal file/directory names also allowed)62:     --ignore-dir NAME    Alias for --ignore for compatibility with ack.agtest/lstest3:NAME35:              mation); with -l: show ctime and sort by name; otherwise:  sort  by  ctime,  newest74:              in a long listing, don&#x27;t print group names93:              hyperlink file names; WHEN can be &#x27;always&#x27; (default if omitted), &#x27;auto&#x27;, or &#x27;never&#x27;96:              append indicator with style WORD  to  entry  names:  none  (default),  slash  (-p),121:              print entry names without quoting135:       -Q, --quote-name136:              enclose entry names in double quotes139:              use quoting style WORD for  entry  names:  literal,  locale,  shell,  shell-always,155:              sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), exten‐172:              name; otherwise: sort by access time, newest first~ ❯ ag name ./agtest                                                                    01:38:28 PMagtest/text21:     --color-path         Color codes for path names (Default: 1;32)23:     --[no]filename       Print file names (Enabled unless searching a single file)24:  -H --[no]heading        Print file names before each file&#x27;s matches28:  -g --filename-pattern PATTERN29:                          Print filenames matching PATTERN30:  -l --files-with-matches Only print filenames that contain matches33:                          Only print filenames that don&#x27;t contain matches48:  -0 --null --print0      Separate filenames with null (for &#x27;xargs -0&#x27;)57:  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN61:                          (literal file/directory names also allowed)62:     --ignore-dir NAME    Alias for --ignore for compatibility with ack.agtest/lstest3:NAME35:              mation); with -l: show ctime and sort by name; otherwise:  sort  by  ctime,  newest74:              in a long listing, don&#x27;t print group names93:              hyperlink file names; WHEN can be &#x27;always&#x27; (default if omitted), &#x27;auto&#x27;, or &#x27;never&#x27;96:              append indicator with style WORD  to  entry  names:  none  (default),  slash  (-p),121:              print entry names without quoting135:       -Q, --quote-name136:              enclose entry names in double quotes139:              use quoting style WORD for  entry  names:  literal,  locale,  shell,  shell-always,155:              sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), exten‐172:              name; otherwise: sort by access time, newest first</code></pre><h3 id="D-–debug"><a href="#D-–debug" class="headerlink" title="-D –debug"></a>-D –debug</h3><p>Ridiculous debugging (probably not useful) </p><p>会输出debug信息</p><pre><code class="hljs shell">~ ❯ ag -D after ./agtest                                                                01:40:33 PMDEBUG: Found user&#x27;s home dir: /home/chenDEBUG: Skipping ignore file /home/chen/.agignore: not readableDEBUG: global core.excludesfile: /home/chen/.config/git/ignoreDEBUG: Skipping ignore file /home/chen/.config/git/ignore: not readableDEBUG: Query is afterDEBUG: PCRE Version: 8.39 2016-06-14DEBUG: Using 7 workersDEBUG: Worker 0 startedDEBUG: Thread 0 set to CPU 0DEBUG: Thread 1 set to CPU 1DEBUG: Thread 2 set to CPU 2DEBUG: Worker 2 startedDEBUG: Worker 1 startedDEBUG: Thread 3 set to CPU 3DEBUG: Worker 3 startedDEBUG: Thread 4 set to CPU 4DEBUG: Worker 4 startedDEBUG: Thread 5 set to CPU 5DEBUG: Worker 5 startedDEBUG: Thread 6 set to CPU 6DEBUG: searching path ./agtest for afterDEBUG: Skipping ignore file ./agtest/.ignore: not readableDEBUG: Skipping ignore file ./agtest/.gitignore: not readableDEBUG: Skipping ignore file ./agtest/.git/info/exclude: not readableDEBUG: Skipping ignore file ./agtest/.hgignore: not readableDEBUG: search_dir: path is &#x27;./agtest&#x27;, base_path is &#x27;/home/chen/agtest/&#x27;, path_start is &#x27;./agtest&#x27;DEBUG: text not ignoredDEBUG: lstest not ignoredDEBUG: ./agtest/text added to work queueDEBUG: ./agtest/lstest added to work queueDEBUG: Match found. File ./agtest/text, offset 243 bytes.DEBUG: Worker 6 startedDEBUG: Worker 6 finished.DEBUG: Match found. File ./agtest/text, offset 274 bytes.DEBUG: Worker 5 finished.DEBUG: Match found. File ./agtest/text, offset 1244 bytes.DEBUG: No match in ./agtest/lstestDEBUG: Worker 4 finished.DEBUG: Worker 1 finished.DEBUG: Match found. File ./agtest/text, offset 3527 bytes.DEBUG: Match found. File ./agtest/text, offset 4489 bytes.agtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersDEBUG: Worker 0 finished.DEBUG: Worker 3 finished.DEBUG: Worker 2 finished.</code></pre><h3 id="–depth-NUM"><a href="#–depth-NUM" class="headerlink" title="–depth NUM"></a>–depth NUM</h3><p>Search up to NUM directories deep (Default: 25)</p><p>递归深度 默认25</p><pre><code class="hljs shell">~ ❯ ag --depth=2 after                                                                  02:03:01 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/depth/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag --depth=1 after                                                                  02:03:12 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters</code></pre><h3 id="f-–follow"><a href="#f-–follow" class="headerlink" title="-f –follow"></a>-f –follow</h3><p>Follow symlinks  </p><p>遵循符号链接</p><blockquote><p><strong>符号链接</strong>（<strong>软链接、Symbolic link</strong>）是一类特殊的<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%96%87%E4%BB%B6">文件</a>， 其包含有一条以绝对<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E5%BE%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">路径</a>或者相对路径的形式指向其它文件或者目录的引用。[<a href="https://zh.wikipedia.org/wiki/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5#cite_note-1">1]</a> 符号链接最早在4.2<a href="https://zh.wikipedia.org/wiki/BSD">BSD</a>版本中出现（1983年）。今天<a href="https://zh.wikipedia.org/wiki/POSIX">POSIX</a>操作系统标准、大多数<a href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F">类Unix系统</a>、<a href="https://zh.wikipedia.org/wiki/Windows_Vista">Windows Vista</a>、<a href="https://zh.wikipedia.org/wiki/Windows_7">Windows 7</a>都支持符号链接。<a href="https://zh.wikipedia.org/wiki/Windows_2000">Windows 2000</a>与<a href="https://zh.wikipedia.org/wiki/Windows_XP">Windows XP</a>在某种程度上也支持符号链接。</p><p>符号链接的操作是透明的：对符号链接文件进行读写的程序会表现得像直接对目标文件进行操作。某些需要特别处理符号链接的程序（如备份程序）可能会识别并直接对其进行操作。</p><p>一个符号链接文件仅包含有一个文本字符串，其被操作系统解释为一条指向另一个文件或者目录的路径。它是一个独立文件，其存在并不依赖于目标文件。如果删除一个符号链接，它指向的目标文件不受影响。如果目标文件被移动、重命名或者删除，任何指向它的符号链接仍然存在，但是它们将会指向一个不复存在的文件。这种情况被有时被称为<em>被遗弃</em>。</p></blockquote><h3 id="G-–file-search-regex-PATTERN"><a href="#G-–file-search-regex-PATTERN" class="headerlink" title="-G –file-search-regex  PATTERN"></a>-G –file-search-regex  PATTERN</h3><p>Limit search to filenames matching PATTERN</p><p>限制搜素范围为 文件名含有PATTERN的文件</p><pre><code class="hljs shell">~ ❯ ag -G &#x27;test&#x27; name ./agtest                                                          02:45:10 PMagtest/text21:     --color-path         Color codes for path names (Default: 1;32)23:     --[no]filename       Print file names (Enabled unless searching a single file)24:  -H --[no]heading        Print file names before each file&#x27;s matches28:  -g --filename-pattern PATTERN29:                          Print filenames matching PATTERN30:  -l --files-with-matches Only print filenames that contain matches33:                          Only print filenames that don&#x27;t contain matches48:  -0 --null --print0      Separate filenames with null (for &#x27;xargs -0&#x27;)57:  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN61:                          (literal file/directory names also allowed)62:     --ignore-dir NAME    Alias for --ignore for compatibility with ack.agtest/depth/text21:     --color-path         Color codes for path names (Default: 1;32)23:     --[no]filename       Print file names (Enabled unless searching a single file)24:  -H --[no]heading        Print file names before each file&#x27;s matches28:  -g --filename-pattern PATTERN29:                          Print filenames matching PATTERN30:  -l --files-with-matches Only print filenames that contain matches33:                          Only print filenames that don&#x27;t contain matches48:  -0 --null --print0      Separate filenames with null (for &#x27;xargs -0&#x27;)57:  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN61:                          (literal file/directory names also allowed)62:     --ignore-dir NAME    Alias for --ignore for compatibility with ack.agtest/lstest3:NAME35:              mation); with -l: show ctime and sort by name; otherwise:  sort  by  ctime,  newest74:              in a long listing, don&#x27;t print group names93:              hyperlink file names; WHEN can be &#x27;always&#x27; (default if omitted), &#x27;auto&#x27;, or &#x27;never&#x27;96:              append indicator with style WORD  to  entry  names:  none  (default),  slash  (-p),121:              print entry names without quoting135:       -Q, --quote-name136:              enclose entry names in double quotes139:              use quoting style WORD for  entry  names:  literal,  locale,  shell,  shell-always,155:              sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), exten‐172:              name; otherwise: sort by access time, newest first</code></pre><pre><code class="hljs shell">~ ❯ ag -G &#x27;lstest&#x27; name ./agtest                                                        02:45:23 PMagtest/lstest3:NAME35:              mation); with -l: show ctime and sort by name; otherwise:  sort  by  ctime,  newest74:              in a long listing, don&#x27;t print group names93:              hyperlink file names; WHEN can be &#x27;always&#x27; (default if omitted), &#x27;auto&#x27;, or &#x27;never&#x27;96:              append indicator with style WORD  to  entry  names:  none  (default),  slash  (-p),121:              print entry names without quoting135:       -Q, --quote-name136:              enclose entry names in double quotes139:              use quoting style WORD for  entry  names:  literal,  locale,  shell,  shell-always,155:              sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), exten‐172:              name; otherwise: sort by access time, newest first</code></pre><h3 id="–hidden"><a href="#–hidden" class="headerlink" title="–hidden"></a>–hidden</h3><p>Search hidden files (obeys .*ignore files) </p><p>搜索包含隐藏文件（.*）</p><pre><code class="hljs shell">~ ❯ ag --hidden name agtest                                                             02:49:29 PMagtest/.mvtest # 隐藏文件3:NAME4:       mv - move (rename) files12:       Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.89:       rename(2)agtest/text21:     --color-path         Color codes for path names (Default: 1;32)23:     --[no]filename       Print file names (Enabled unless searching a single file)24:  -H --[no]heading        Print file names before each file&#x27;s matches28:  -g --filename-pattern PATTERN29:                          Print filenames matching PATTERN30:  -l --files-with-matches Only print filenames that contain matches33:                          Only print filenames that don&#x27;t contain matches48:  -0 --null --print0      Separate filenames with null (for &#x27;xargs -0&#x27;)57:  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN61:                          (literal file/directory names also allowed)62:     --ignore-dir NAME    Alias for --ignore for compatibility with ack.agtest/lstest3:NAME35:              mation); with -l: show ctime and sort by name; otherwise:  sort  by  ctime,  newest74:              in a long listing, don&#x27;t print group names93:              hyperlink file names; WHEN can be &#x27;always&#x27; (default if omitted), &#x27;auto&#x27;, or &#x27;never&#x27;96:              append indicator with style WORD  to  entry  names:  none  (default),  slash  (-p),121:              print entry names without quoting135:       -Q, --quote-name136:              enclose entry names in double quotes139:              use quoting style WORD for  entry  names:  literal,  locale,  shell,  shell-always,155:              sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), exten‐172:              name; otherwise: sort by access time, newest firstagtest/depth/text21:     --color-path         Color codes for path names (Default: 1;32)23:     --[no]filename       Print file names (Enabled unless searching a single file)24:  -H --[no]heading        Print file names before each file&#x27;s matches28:  -g --filename-pattern PATTERN29:                          Print filenames matching PATTERN30:  -l --files-with-matches Only print filenames that contain matches33:                          Only print filenames that don&#x27;t contain matches48:  -0 --null --print0      Separate filenames with null (for &#x27;xargs -0&#x27;)57:  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN61:                          (literal file/directory names also allowed)62:     --ignore-dir NAME    Alias for --ignore for compatibility with ack.</code></pre><h3 id="i-–ignore-case"><a href="#i-–ignore-case" class="headerlink" title="-i –ignore-case"></a>-i –ignore-case</h3><p>Match case insensitively </p><p> 不区分大小写</p><pre><code class="hljs shell">~ ❯ ag AFTER agtest                                                                     02:53:06 PM~ ❯ ag -i AFTER agtest                                                                  02:53:13 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/depth/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters</code></pre><h3 id="–ignore-PATTERN"><a href="#–ignore-PATTERN" class="headerlink" title="–ignore PATTERN"></a>–ignore PATTERN</h3><p>Ignore files/directories matching PATTERN </p><p>忽略含有PATTERN的文件或文件夹</p><pre><code class="hljs shell">~ ❯ ag after agtest                                                                     02:53:18 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/depth/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag --ignore &#x27;depth&#x27; after agtest       #忽略文件夹                                     02:55:49 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯</code></pre><pre><code class="hljs shell">~ ❯  ag  name agtest                                                                    03:03:15 PMagtest/text21:     --color-path         Color codes for path names (Default: 1;32)23:     --[no]filename       Print file names (Enabled unless searching a single file)24:  -H --[no]heading        Print file names before each file&#x27;s matches28:  -g --filename-pattern PATTERN29:                          Print filenames matching PATTERN30:  -l --files-with-matches Only print filenames that contain matches33:                          Only print filenames that don&#x27;t contain matches48:  -0 --null --print0      Separate filenames with null (for &#x27;xargs -0&#x27;)57:  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN61:                          (literal file/directory names also allowed)62:     --ignore-dir NAME    Alias for --ignore for compatibility with ack.agtest/depth/text21:     --color-path         Color codes for path names (Default: 1;32)23:     --[no]filename       Print file names (Enabled unless searching a single file)24:  -H --[no]heading        Print file names before each file&#x27;s matches28:  -g --filename-pattern PATTERN29:                          Print filenames matching PATTERN30:  -l --files-with-matches Only print filenames that contain matches33:                          Only print filenames that don&#x27;t contain matches48:  -0 --null --print0      Separate filenames with null (for &#x27;xargs -0&#x27;)57:  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN61:                          (literal file/directory names also allowed)62:     --ignore-dir NAME    Alias for --ignore for compatibility with ack.agtest/lstest3:NAME35:              mation); with -l: show ctime and sort by name; otherwise:  sort  by  ctime,  newest74:              in a long listing, don&#x27;t print group names93:              hyperlink file names; WHEN can be &#x27;always&#x27; (default if omitted), &#x27;auto&#x27;, or &#x27;never&#x27;96:              append indicator with style WORD  to  entry  names:  none  (default),  slash  (-p),121:              print entry names without quoting135:       -Q, --quote-name136:              enclose entry names in double quotes139:              use quoting style WORD for  entry  names:  literal,  locale,  shell,  shell-always,155:              sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), exten‐172:              name; otherwise: sort by access time, newest first~ ❯ ag --ignore &#x27;lstest&#x27; name agtest            #忽略文件                                        03:02:27 PMagtest/text21:     --color-path         Color codes for path names (Default: 1;32)23:     --[no]filename       Print file names (Enabled unless searching a single file)24:  -H --[no]heading        Print file names before each file&#x27;s matches28:  -g --filename-pattern PATTERN29:                          Print filenames matching PATTERN30:  -l --files-with-matches Only print filenames that contain matches33:                          Only print filenames that don&#x27;t contain matches48:  -0 --null --print0      Separate filenames with null (for &#x27;xargs -0&#x27;)57:  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN61:                          (literal file/directory names also allowed)62:     --ignore-dir NAME    Alias for --ignore for compatibility with ack.agtest/depth/text21:     --color-path         Color codes for path names (Default: 1;32)23:     --[no]filename       Print file names (Enabled unless searching a single file)24:  -H --[no]heading        Print file names before each file&#x27;s matches28:  -g --filename-pattern PATTERN29:                          Print filenames matching PATTERN30:  -l --files-with-matches Only print filenames that contain matches33:                          Only print filenames that don&#x27;t contain matches48:  -0 --null --print0      Separate filenames with null (for &#x27;xargs -0&#x27;)57:  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN61:                          (literal file/directory names also allowed)62:     --ignore-dir NAME    Alias for --ignore for compatibility with ack.</code></pre><h3 id="p-–path-to-ignore-STRING"><a href="#p-–path-to-ignore-STRING" class="headerlink" title="-p –path-to-ignore STRING"></a>-p –path-to-ignore STRING</h3><p>  Use .ignore file at STRING</p><h3 id="Q-–literal"><a href="#Q-–literal" class="headerlink" title="-Q –literal"></a>-Q –literal</h3><p>Don’t parse PATTERN as a regular expression </p><p>不再将pattern解析为正则表达式</p><pre><code class="hljs shell">~ ❯ ag  &#x27;[a-z]fter&#x27; agtest                                                              03:27:42 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/depth/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag  -Q &#x27;[a-z]fter&#x27; agtest</code></pre><h3 id="s-–case-sensitive"><a href="#s-–case-sensitive" class="headerlink" title="-s –case-sensitive"></a>-s –case-sensitive</h3><p>Match case sensitively # 区分大小写</p><pre><code class="hljs shell">~ ❯ ag  -s &#x27;after&#x27; agtest                                                               03:28:28 PMagtest/depth/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag  -s &#x27;After&#x27; agtest</code></pre><h3 id="S-–smart-case"><a href="#S-–smart-case" class="headerlink" title="-S –smart-case"></a>-S –smart-case</h3><p>Match case insensitively unless PATTERN contains uppercase characters (Enabled by default)</p><p>除非PATTERN包含大写字母 否则不区分大小写 (默认启用)</p><pre><code class="hljs shell">~ ❯ ag after agtest                                                                     03:35:15 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/depth/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag After agtest                                                                     03:35:19 PM~ ❯ ag -S After agtest                                                                  03:35:23 PM~ ❯ ag -S after agtest                                                                  03:35:28 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/depth/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters</code></pre><h3 id="t-–all-text"><a href="#t-–all-text" class="headerlink" title="-t –all-text"></a>-t –all-text</h3><p>Search all text files (doesn’t include hidden files) </p><p>搜索所有文本文件（不包括隐藏文件）</p><pre><code class="hljs shell">~ ❯ ag --hidden mv agtest                                                               03:41:26 PMagtest/.mvtest1:MV(1)                                     User Commands                                     MV(1)4:       mv - move (rename) files7:       mv [OPTION]... [-T] SOURCE DEST8:       mv [OPTION]... SOURCE... DIRECTORY9:       mv [OPTION]... -t DIRECTORY SOURCE...80:       Report mv translation bugs to &lt;https://translationproject.org/team/&gt;91:       Full documentation at: &lt;https://www.gnu.org/software/coreutils/mv&gt;92:       or available locally via: info &#x27;(coreutils) mv invocation&#x27;94:GNU coreutils 8.30                        September 2019                                    MV(1)agtest/mvtest1:MV(1)                                     User Commands                                     MV(1)4:       mv - move (rename) files7:       mv [OPTION]... [-T] SOURCE DEST8:       mv [OPTION]... SOURCE... DIRECTORY9:       mv [OPTION]... -t DIRECTORY SOURCE...80:       Report mv translation bugs to &lt;https://translationproject.org/team/&gt;91:       Full documentation at: &lt;https://www.gnu.org/software/coreutils/mv&gt;92:       or available locally via: info &#x27;(coreutils) mv invocation&#x27;94:GNU coreutils 8.30                        September 2019                                    MV(1)~ ❯ ag -t mv agtest                                                                     03:41:35 PMagtest/mvtest1:MV(1)                                     User Commands                                     MV(1)4:       mv - move (rename) files7:       mv [OPTION]... [-T] SOURCE DEST8:       mv [OPTION]... SOURCE... DIRECTORY9:       mv [OPTION]... -t DIRECTORY SOURCE...80:       Report mv translation bugs to &lt;https://translationproject.org/team/&gt;91:       Full documentation at: &lt;https://www.gnu.org/software/coreutils/mv&gt;92:       or available locally via: info &#x27;(coreutils) mv invocation&#x27;94:GNU coreutils 8.30                        September 2019</code></pre><h3 id="u-–unrestricted"><a href="#u-–unrestricted" class="headerlink" title="-u –unrestricted"></a>-u –unrestricted</h3><p>Search all files (ignore .ignore, .gitignore, etc.;searches binary and hidden files as well)</p><p>查询所有文件</p><pre><code class="hljs shell">~ ❯ ag mv agtest                                                                        03:43:27 PMagtest/mvtest1:MV(1)                                     User Commands                                     MV(1)4:       mv - move (rename) files7:       mv [OPTION]... [-T] SOURCE DEST8:       mv [OPTION]... SOURCE... DIRECTORY9:       mv [OPTION]... -t DIRECTORY SOURCE...80:       Report mv translation bugs to &lt;https://translationproject.org/team/&gt;91:       Full documentation at: &lt;https://www.gnu.org/software/coreutils/mv&gt;92:       or available locally via: info &#x27;(coreutils) mv invocation&#x27;94:GNU coreutils 8.30                        September 2019                                    MV(1)~ ❯ ag -u mv agtest                                                                     03:43:42 PMagtest/.mvtest1:MV(1)                                     User Commands                                     MV(1)4:       mv - move (rename) files7:       mv [OPTION]... [-T] SOURCE DEST8:       mv [OPTION]... SOURCE... DIRECTORY9:       mv [OPTION]... -t DIRECTORY SOURCE...80:       Report mv translation bugs to &lt;https://translationproject.org/team/&gt;91:       Full documentation at: &lt;https://www.gnu.org/software/coreutils/mv&gt;92:       or available locally via: info &#x27;(coreutils) mv invocation&#x27;94:GNU coreutils 8.30                        September 2019                                    MV(1)agtest/mvtest1:MV(1)                                     User Commands                                     MV(1)4:       mv - move (rename) files7:       mv [OPTION]... [-T] SOURCE DEST8:       mv [OPTION]... SOURCE... DIRECTORY9:       mv [OPTION]... -t DIRECTORY SOURCE...80:       Report mv translation bugs to &lt;https://translationproject.org/team/&gt;91:       Full documentation at: &lt;https://www.gnu.org/software/coreutils/mv&gt;92:       or available locally via: info &#x27;(coreutils) mv invocation&#x27;94:GNU coreutils 8.30                        September 2019</code></pre><h3 id="v-–invert-match"><a href="#v-–invert-match" class="headerlink" title="-v –invert-match"></a>-v –invert-match</h3><p>反向匹配</p><pre><code class="hljs shell">~/agtest ❯ cat vtest                                                                    03:46:56 PM12345</code></pre><pre><code class="hljs shell">~/agtest ❯ ag 1 vtest                                                                9s 03:46:36 PM1:1~/agtest ❯ ag -v 1 vtest                                                                03:46:52 PM2:23:34:45:5</code></pre><h3 id="w-–word-regexp"><a href="#w-–word-regexp" class="headerlink" title="-w –word-regexp"></a>-w –word-regexp</h3><p> Only match whole words </p><p>整个单词匹配</p><pre><code class="hljs shell">~ ❯ ag -w fter agtest                                                                   03:48:59 PM~ ❯ ag -w after agtest                                                                  03:49:08 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/depth/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters</code></pre><h3 id="W-–width-NUM"><a href="#W-–width-NUM" class="headerlink" title="-W –width NUM"></a>-W –width NUM</h3><p>Truncate match lines after NUM characters </p><p>匹配的行信息在num个字符后截断</p><pre><code class="hljs shell">~ ❯ ag -w after agtest                                                                  03:50:20 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/depth/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag -W 15 after agtest                                                               03:50:28 PMagtest/text12:  -A --after [L [...]26:  -C --context  [...]63:  -m --max-coun [...]79:  -W --width NU [...]agtest/depth/text12:  -A --after [L [...]26:  -C --context  [...]63:  -m --max-coun [...]79:  -W --width NU [...]</code></pre><h3 id="z-–search-zip"><a href="#z-–search-zip" class="headerlink" title="-z –search-zip"></a>-z –search-zip</h3><p>Search contents of compressed (e.g., gzip) files </p><p>压缩文件中匹配</p><pre><code class="hljs shell">~ ❯ ag after agtest                                                                     04:01:55 PMagtest/depth/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM characters~ ❯ ag -z after agtest                                                                  04:02:01 PMagtest/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/depth/text12:  -A --after [LINES]      Print lines after match (Default: 2)26:  -C --context [LINES]    Print lines before and after matches (Default: 2)63:  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)79:  -W --width NUM          Truncate match lines after NUM charactersagtest/agtest.tar.gz205:  -A --after [LINES]      Print lines after match (Default: 2)agtest/agtest.tar.gz220:(Default: 2)agtest/agtest.tar.gz258:: 10,000)agtest/agtest.tar.gz275:agtest/agtest.tar.gzag: truncated file: Success533:%~ ❯</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx--HTTP负载均衡</title>
    <link href="/2020/08/29/nginx/Nginx2/"/>
    <url>/2020/08/29/nginx/Nginx2/</url>
    
    <content type="html"><![CDATA[<h2 id="HTTP负载均衡"><a href="#HTTP负载均衡" class="headerlink" title="HTTP负载均衡"></a>HTTP负载均衡</h2><h3 id="http-中定义-upstream-upstream-中定义server"><a href="#http-中定义-upstream-upstream-中定义server" class="headerlink" title="http 中定义 upstream , upstream 中定义server"></a>http 中定义 upstream , upstream 中定义server</h3><pre><code class="hljs shell">upstream backend &#123;    server backend1.example.com weight=5;    server 127.0.0.1:8080       max_fails=3 fail_timeout=30s;    server unix:/tmp/backend3;    server backup1.example.com  backup;&#125;</code></pre><ul><li>upstream -&gt; 定义一组servers监听不同的端口，监听TCP和UNIX-domain sockets (<a href="http://unix/tmp/backend.socket:/uri/">http://unix:/tmp/backend.socket:/uri/</a>) 可以混合使用。默认情况下使用轮巡方式进行负载均衡，如上example，根据权重不同，每7个请求会有5个请求分发在backend1.example.com服务器上，另外两个请求分给其他的服务器。</li></ul><h3 id="http-中定义虚拟服务器-server"><a href="#http-中定义虚拟服务器-server" class="headerlink" title="http 中定义虚拟服务器 server"></a>http 中定义虚拟服务器 server</h3><pre><code class="hljs shell">server &#123;    location / &#123;        proxy_pass http://backend;    &#125;&#125;</code></pre><ul><li>proxy_pass -&gt; 设置代理服务器的协议和地址，可以指定<code>http</code>和<code>https</code>协议，地址可以为域名或者IP地址，端口可选</li></ul><p>其他可用相似参数：</p><ul><li><p>fastcgi_pass -&gt; 设置FastCGI服务器，地址由域名或IP以及端口号组成</p></li><li><p>memcached_pass -&gt; 设置缓存服务器，地址由域名或IP以及端口号组成</p></li><li><p>scgi_pass -&gt; 设置SCGI 服务器，地址由域名或IP以及端口号组成</p></li><li><p>uwsgi_pass -&gt; 设置uwsgi服务器，地址由域名或IP以及端口号组成。协议可以指定<code>uwsgi</code>或<code>suwsgi</code></p></li></ul><h3 id="负载均衡方式"><a href="#负载均衡方式" class="headerlink" title="负载均衡方式"></a>负载均衡方式</h3><ul><li><p>Round Robin（轮询）默认方式，根据<code>权重</code>在服务器之间均匀分发请求。</p><pre><code class="hljs shell">upstream backend &#123;<span class="hljs-meta">   #</span><span class="bash"> no load balancing method is specified <span class="hljs-keyword">for</span> Round Robin</span> server backend1.example.com; server backend2.example.com;&#125;</code></pre></li><li><p>Least Connections 将请求发送到<code>最少数量的活动链接</code>的服务器,同时考虑服务器<code>权重</code>。</p><pre><code class="hljs shell">upstream backend &#123;  least_conn;  server backend1.example.com;  server backend2.example.com;&#125;</code></pre></li><li><p>IP Hash 根据客户端IP地址确定向其发送请求的服务器。 在这种情况下，可以使用<code>IPv4地址的前三个八位字节</code>或<code>整个IPv6地址</code>来计算哈希值。 该方法保证了<code>来自相同地址的请求将到达同一服务器</code>，除非该请求不可用。</p><pre><code class="hljs shell">upstream backend &#123;  ip_hash;  server backend1.example.com;  server backend2.example.com;&#125;</code></pre><p>如果其中一台服务器需要暂时从负载平衡循环中删除，则可以使用<code>down</code>参数对其进行标记，以保留客户端IP地址的当前哈希值。 该服务器要处理的请求将自动发送到组中的下一个服务器：</p><pre><code class="hljs shell">upstream backend &#123;  server backend1.example.com;  server backend2.example.com;  server backend3.example.com down;&#125;</code></pre></li><li><p>Generic Hash 根据用户自定义key计算hash值，从而分发服务。key可以是字符串、变量或者两者组合。</p><pre><code class="hljs shell">upstream backend &#123;  hash $request_uri consistent;  server backend1.example.com;  server backend2.example.com;&#125;</code></pre><p>使用<code>consistent</code>参数启用<code>Ketama</code>一致性哈希算法。如果修改缓存中的服务器映射，这种方式只会有少数的密钥-&gt;服务器关系重新映射，从而减少缓存丢失。</p></li><li><p>Random 请求会随机分发。如果指定<code>two</code>这个参数，那么会首先根据权重选则两个服务器，然后根据指定的以下方法进行请求分发。</p><ul><li><code>least_conn</code> – 活动链接数最少</li><li><code>least_time=header</code> (NGINX Plus) – 服务器返回响应头平均的最小时间(<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#var_upstream_header_time"><code>$upstream_header_time</code></a>)</li><li><code>least_time=last_byte</code> (NGINX Plus) – 服务器接收完整响应的平均最小时间 (<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#var_upstream_response_time"><code>$upstream_response_time</code></a>)</li></ul><pre><code class="hljs shell">upstream backend &#123;  random two least_time=last_byte;  server backend1.example.com;  server backend2.example.com;  server backend3.example.com;  server backend4.example.com;&#125;</code></pre><p>Random负载均衡适用于分布式系统，其会将请求在后台的指定服务的一组服务器中随机分发。如果是其他明确后台服务具体服务器的系统，应该使用其他方法，round robin(轮询)、laest connections(最少链接)或 least time(最少时间)。</p><blockquote><p>除了Round Robin，其他负载均衡方法要放在 upstream{}块中其他命令之前。</p></blockquote></li><li><p>Least Time （plus才有）对于每个请求，NGINX Plus选择平均延迟最低和活动连接数量最低的服务器，其中最低平均延迟是根据<code>least_time</code>指定的配置参数计算的。<code>last_time</code>取值如下：</p><ul><li><code>header</code> – 服务器接收第一个字节的时间</li><li><code>last_byte</code> – 服务器接收完整响应时间</li><li><code>last_byte inflight</code> – 服务器接收完整响应的时间，考虑请求不完整的情况</li></ul><pre><code class="hljs shell">upstream backend &#123;  least_time header;  server backend1.example.com;  server backend2.example.com;&#125;</code></pre></li></ul><h3 id="服务器权重-Server-Weights"><a href="#服务器权重-Server-Weights" class="headerlink" title="服务器权重 Server Weights"></a>服务器权重 Server Weights</h3><p>​    默认的轮询分发请求是根据服务器权重来的，服务器默认权重为1。</p><pre><code class="hljs shell">upstream backend &#123;    server backend1.example.com weight=5;    server backend2.example.com;    server 192.0.0.1 backup;&#125;</code></pre><p>以上例子中三个服务器，第一个权重为5，第二三个未定义权重参数默认为1，第三个服务器<code>backup</code>标记为备用服务器，除非前两个服务器都不可用，否则第三个服务器是不会被分发请求的。因此以上例子，如果有6个请求，则会分给第一个服务器5个，第二个服务器1个。</p><h3 id="服务器缓慢启动Server-Slow-Start"><a href="#服务器缓慢启动Server-Slow-Start" class="headerlink" title="服务器缓慢启动Server Slow-Start"></a>服务器缓慢启动Server Slow-Start</h3><p>Slow-Start功能可以防止刚恢复的服务器再次被请求冲击，这样会导致请求超时从而使其再次被标记为不可用。</p><p>NGINX Plus中开启Slow-Start功能的服务器，在其恢复后会将其权重从0缓慢增到设定值，如下配置：</p><pre><code class="hljs shell">upstream backend &#123;    server backend1.example.com slow_start=30s;    server backend2.example.com;    server 192.0.0.1 backup;&#125;</code></pre><p>30s是将请求分发从0到恢复最大连接数的时间。</p><p>如果只有一台服务器，<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#max_fails"><code>max_fails</code></a>, <a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#fail_timeout"><code>fail_timeout</code></a>, and <a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#slow_start"><code>slow_start</code></a>参数设定的值将会被忽略，其不会被认为是不可用的。</p><h3 id="Session持久化"><a href="#Session持久化" class="headerlink" title="Session持久化"></a>Session持久化</h3><p>Session持久化可以用来将同一个用户的请求分发到同一个服务器。</p><p>NginxPlus支持三种session持久化方式。使用<code>sticky </code>指令指定持久化方式。Nginx的Session持久化方式，通过<code>hash</code>或者<code>ip_hash</code>来实现。</p><ul><li><p>Sticky cookie - Nginx Plus 对首次访问的请求添加cookie，并标记响应其请求的服务器。接下来的请求会匹配cookie从而分发请求到cookie对应标记的服务器。</p><pre><code class="hljs shell">upstream backend &#123;  server backend1.example.com;  server backend2.example.com;  sticky cookie srv_id expires=1h domain=.example.com path=/;&#125;</code></pre><p>srv_id是cookie的名字，expires指定cookie的时效为1小时，domain指定域名，path指定cookie存放的路径，以上是最简单的Session持久化方法。</p></li><li><p>Sticky route<br>Nginx Plus 在第一次接收到客户端的请求的时候会为其指定一个路由，后续的请求会与服务器的路由参数比较，从而分发到正确的代理服务器，路由信息是从<code>cookie</code>或者<code>uri</code>中获取的。</p><pre><code class="hljs shell">upstream backend &#123;  server backend1.example.com route=a;  server backend2.example.com route=b;  sticky route $route_cookie $route_uri;&#125;</code></pre></li></ul><ul><li><p>Sticky learn</p><pre><code class="hljs shell">upstream backend &#123; server backend1.example.com; server backend2.example.com; sticky learn     create=$upstream_cookie_examplecookie     lookup=$cookie_examplecookie     zone=client_sessions:1m     timeout=1h;&#125;</code></pre><p><code>create</code>参数表示如何创建session，示例为根据传来的名为examplecookie的cookie来创建。</p><p><code>lookup</code>参数表示如何查找session，示例为在名为examplecookie中查找session。</p><p><code>zone</code>参数表示session存放的区域名称和大小，示例为区域名为client_session大小为1m。</p><p><code>timeout</code>为session过期时间。</p><p>​        与前两种方式相比较，这种持久化方式要更加复杂一些，因为当前持久化方式不需要客户端存放cookie信息，cookie信息是存放在服务器的共享区域内。</p><p>在集群中session存放的位置是可以共享的，但是要满足以下条件：</p><ul><li>共享存储区域的名字得相同，也就是<code>zone</code>后的参数得一致。</li><li>开启<a href="https://nginx.org/en/docs/stream/ngx_stream_zone_sync_module.html?&amp;_ga=2.266232719.1684610560.1600414511-39955037.1597994482#zone_sync">zone_sync</a>共享区域同步功能。</li><li>指定<code>sync</code>参数。</li></ul></li></ul><h3 id="限制连接数量"><a href="#限制连接数量" class="headerlink" title="限制连接数量"></a>限制连接数量</h3><p>使用<code>max_conns</code>来指定最大连接数，如果满了，进入队列进行处理。</p><pre><code class="hljs shell">upstream backend &#123;    server backend1.example.com max_conns=3;    server backend2.example.com;    queue 100 timeout=70;&#125;</code></pre><p>如果队列满了，或者是超时未获得连接，则客户端是会收到错误信息的。</p><blockquote><p>如果其他的工作进程中有打开的<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&_ga=2.203866896.1684610560.1600414511-39955037.1597994482#keepalive">keepalive</a>连接，那么max_conns限制会被忽略。因此，多个工作进程共享内存，max_conns是有可能超过指定数量的。</p></blockquote><ol><li><p>多个工作进程间数据共享</p><ul><li><p>如果负载均衡<code>upstream</code>没有指定<code>zone</code>，每个工作进程从服务器组拷贝的<code>配置信息</code>以及<code>相关计数</code>是相互独立的。配置信息将无法动态进行修改。</p></li><li><p>指定<code>zone</code>参数则服务器组的配置信息将不再是每个工作进程独自一份，配置信息会放在共享内存中，这样就可以动态修改配置信息，并同步相关计数。</p></li><li><p><code>健康检查</code>以及<code>动态配置</code>功能的开启是需要指定<code>zone</code>参数的。配置<code>zone</code>参数是比较有用的，生产上不可能一个工作进程去处理请求的。如果当前工作进程挂了，其他工作进程是无法全部立刻知道你挂了（确定挂掉是要在fail_timeout时间内，失败重试的次数必须等于max_fails* 辅助工作进程数量），部分工作线程还是会给你发请求的。</p><p>不指定<code>zone</code>最小连接数（least connections）这种负载均衡方法在低负载下是没法用的。因为计数是独立的，工作进程拿到的是自己保存的计数，一个进程分发完请求给最小活跃连接数的服务器后，服务器活跃连接数变了只有发请求的工作进程知道，其他工作进程是不知道的，可能根据旧的信息，再次给这个服务器分发请求。</p></li><li><p>没有官方推荐的配置，因为大家实际情况不一样请自行设置。</p><blockquote><p>session持久化方式未sticky_route，开启单个健康检查的情况下，256k的内存可以存放的服务器指标：</p><p>128 server 每个服务器定义为 IP地址:端口</p><p>88 server 每个服务器定义为 主机名:端口，主机名解析为单个IP地址</p><p>12 server 每个服务器定义为 主机名:端口，主机名解析为多个IP地址</p></blockquote></li></ul></li><li><p>使用DNS修改HTTP负载均衡的配置<br>服务器组的配置信息可以在运行时使用DNS来修改。根据DNS定时解析域名，自动同步，不需要重启。</p><pre><code class="hljs shell">http &#123; resolver 10.0.0.1 valid=300s ipv6=off; resolver_timeout 10s; server &#123;     location / &#123;         proxy_pass http://backend;     &#125; &#125; upstream backend &#123;     zone backend 32k;     least_conn;     # ...     server backend1.example.com resolve;     server backend2.example.com resolve; &#125;&#125;</code></pre><p><code>resolver</code> 指定DNS，valid配置解析IP时间间隔。ipv6=off 只解析ipv4，默认两种都解析。</p><p><code>resolve</code> 指定哪个域名要被解析。<br>如果一个域名被解析为多个IP列表，则会在这些IP列表之间进行负载均衡。并且IP列表改变后，会立即在新的IP列表间进行负载均衡。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>web服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx--基础入门</title>
    <link href="/2020/08/29/nginx/Nginx1/"/>
    <url>/2020/08/29/nginx/Nginx1/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx–基础入门"><a href="#Nginx–基础入门" class="headerlink" title="Nginx–基础入门"></a>Nginx–基础入门</h1><blockquote><p><strong>Nginx</strong>（发音同“engine X”）是异步框架的<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%A0%81%E4%BC%BA%E6%9C%8D%E5%99%A8">网页服务器</a>，也可以用作<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a>、<a href="https://zh.wikipedia.org/wiki/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">负载平衡器</a>和<a href="https://zh.wikipedia.org/wiki/HTTP%E7%BC%93%E5%AD%98">HTTP缓存</a>。该软件由<a href="https://zh.wikipedia.org/wiki/%E4%BC%8A%E6%88%88%E7%88%BE%C2%B7%E8%B3%BD%E7%B4%A2%E8%80%B6%E5%A4%AB">伊戈尔·赛索耶夫</a>创建并于2004年首次公开发布[<a href="https://zh.wikipedia.org/wiki/Nginx#cite_note-Mobily-6">6]</a>。2011年成立同名公司以提供支持[<a href="https://zh.wikipedia.org/wiki/Nginx#cite_note-D-7">7]</a>。2019年3月11日，Nginx公司被<a href="https://zh.wikipedia.org/w/index.php?title=F5_Networks&action=edit&redlink=1">F5 Networks</a>以6.7亿美元收购[<a href="https://zh.wikipedia.org/wiki/Nginx#cite_note-8">8]</a>。</p><p>Nginx是免费的<a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6">开源软件</a>，根据类<a href="https://zh.wikipedia.org/wiki/BSD%E8%AE%B8%E5%8F%AF%E8%AF%81">BSD许可证</a>的条款发布。一大部分Web服务器使用Nginx[<a href="https://zh.wikipedia.org/wiki/Nginx#cite_note-9">9]</a>，通常作为<a href="https://zh.wikipedia.org/wiki/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">负载均衡器</a>。[<a href="https://zh.wikipedia.org/wiki/Nginx#cite_note-10">10]</a></p></blockquote><ul><li>Nginx可以部署在网络上使用<a href="https://zh.wikipedia.org/wiki/FastCGI">FastCGI</a>脚本、<a href="https://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E9%80%9A%E7%94%A8%E7%BD%91%E5%85%B3%E6%8E%A5%E5%8F%A3">SCGI</a>处理程序、<a href="https://zh.wikipedia.org/wiki/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BD%91%E5%85%B3%E6%8E%A5%E5%8F%A3">WSGI</a>应用服务器或<a href="https://zh.wikipedia.org/w/index.php?title=Phusion_Passenger&action=edit&redlink=1">Phusion Passenger</a>模块的动态<a href="https://zh.wikipedia.org/wiki/HTTP">HTTP</a>内容，并可作为软件<a href="https://zh.wikipedia.org/wiki/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">负载均衡器</a>。</li><li>Nginx使用异步事件驱动的方法来处理请求。Nginx的模块化事件驱动架构[<a href="https://zh.wikipedia.org/wiki/Nginx#cite_note-aosabook-12">12]</a>可以在高负载下提供更可预测的性能[<a href="https://zh.wikipedia.org/wiki/Nginx#cite_note-Configuration-13">13]</a>。</li><li>Nginx是一款面向性能设计的HTTP服务器，相较于<a href="https://zh.wikipedia.org/wiki/Apache_HTTP_Server">Apache</a>、<a href="https://zh.wikipedia.org/wiki/Lighttpd">lighttpd</a>具有占有<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98">内存</a>少，稳定性高等优势。</li><li>Nginx不采用每客户机一线程的设计模型，而是充分使用异步逻辑从而削减了上下文调度开销，所以并发服务能力更强。</li><li>Nginx 主进程ID会被写进nginx.pid文件中，位于/usr/local/nginx/logs或/var/run路径下。<img src="/img/Nginx.assets/image-20200820163554437.png" alt="image-20200820163554437"></li><li>Nginx日志路径<code>/usr/local/nginx/logs</code> 或 <code>/var/log/nginx</code><img src="/img/Nginx.assets/image-20200820185305153.png" alt="image-20200820185305153"></li></ul><h2 id="简单入门"><a href="#简单入门" class="headerlink" title="简单入门"></a>简单入门</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>ubuntu 20.04</p></blockquote><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装</span>~ ❯ sudo apt install nginx~ ❯ whereis nginx                                                                    7s 09:59:46 AMnginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz<span class="hljs-meta">#</span><span class="bash"> 版本</span>~ ❯ nginx -v                                                                            09:59:52 AMnginx version: nginx/1.14.0 (Ubuntu)~ ❯ cd /etc/nginx</code></pre><ul><li><p>配置文件<code>nginx.conf</code> 路径为<code>/usr/local/nginx/conf</code>， <code>/etc/nginx</code>或 <code>/usr/local/etc/nginx</code>。<img src="/img/Nginx.assets/image-20200820110747003.png"></p></li><li><p>Nginx 有<strong>一个主进程</strong>和<strong>多个工作进程</strong>。</p></li><li><p>主进程主要用来<strong>读取验证配置</strong>以及<strong>维护工作进程</strong>。</p></li><li><p>工作进程用来<strong>处理请求</strong>。</p></li><li><p>Nginx使用<strong>事件驱动</strong>和<strong>基于操作系统</strong>在工作进程之间高效分发请求。</p></li><li><p>工作进程数量定义在配置文件中(默认自动分配的为当前<strong>cpu核心数</strong>)<img src="/img/Nginx.assets/image-20200820133704669.png"></p></li></ul><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查询当前nginx服务状态</span>/etc/nginx ❯ sudo service nginx status                                                  10:53:10 AM * nginx is not running<span class="hljs-meta"> #</span><span class="bash"> 启动</span>/etc/nginx ❯ sudo service nginx start                                                   10:53:22 AM * Starting nginx nginx</code></pre><p>访问localhost</p><p><img src="/img/Nginx.assets/image-20200820111650637.png" alt="image-20200820111650637"></p><p>常用命令 nginx -s signal</p><p>signa取值：</p><ul><li>stop -&gt; 快速关机</li><li>quit -&gt; 处理完当前请求 关机 </li><li>reload -&gt; 重新加载配置文件</li><li>reopen -&gt; 重新打开日志</li></ul><p>查询nginx进程：</p><pre><code class="hljs shell">ps -ax | grep nginx</code></pre><p><img src="/img/Nginx.assets/image-20200820164024523.png" alt="image-20200820164024523"></p><blockquote><p><code>nginx -s quit</code> 会等待当前请求处理完成再去关机 该命令需要启动当前Ngnix的用户执行</p></blockquote><blockquote><p><code>nginx -s reload</code> 主线程接收到重载配置文件的信号，会验证加载使用新的配置信息。如果加载成功，则会开启新的工作进程去接收请求，通知旧的工作进程shut down， 旧的进程接收到通知后会停止接收新的请求，并且将手里的请求处理完成，然后去exit。否则主进程回滚修改，继续使用旧的配置信息。</p></blockquote><blockquote><p>以下命令也可以平滑关闭Nginx</p><pre><code class="hljs she">kill -s QUIT 1628</code></pre></blockquote><h3 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h3><p>初始默认配置文件：</p><pre><code class="hljs she">user www-data;worker_processes auto;pid &#x2F;run&#x2F;nginx.pid;include &#x2F;etc&#x2F;nginx&#x2F;modules-enabled&#x2F;*.conf;events &#123;        worker_connections 768;        # multi_accept on;&#125;http &#123;        ##        # Basic Settings        ##        sendfile on;        tcp_nopush on;        tcp_nodelay on;        keepalive_timeout 65;        types_hash_max_size 2048;        # server_tokens off;        # server_names_hash_bucket_size 64;        # server_name_in_redirect off;        include &#x2F;etc&#x2F;nginx&#x2F;mime.types;        default_type application&#x2F;octet-stream;        ##        # SSL Settings        ##        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE        ssl_prefer_server_ciphers on;        ##        # Logging Settings        ##        access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;        error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;        ##        # Gzip Settings        ##        gzip on;        # gzip_vary on;        # gzip_proxied any;        # gzip_comp_level 6;        # gzip_buffers 16 8k;        # gzip_http_version 1.1;        # gzip_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript;        ##        # Virtual Host Configs        ##        include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;        include &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;*;&#125;#mail &#123;#       # See sample authentication script at:#       # http:&#x2F;&#x2F;wiki.nginx.org&#x2F;ImapAuthenticateWithApachePhpScript##       # auth_http localhost&#x2F;auth.php;#       # pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;#       # imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;##       server &#123;#               listen     localhost:110;#               protocol   pop3;#               proxy      on;#       &#125;##       server &#123;#               listen     localhost:143;#               protocol   imap;#               proxy      on;#       &#125;#&#125;</code></pre><ul><li><p>Nginx由不同模块组成，模块以指令（参数）的方式定义在配置文件中。指令分简单指令和块级指令。</p></li><li><p>简单指令格式为：指令名+空格+参数值+；</p></li></ul><p><img src="/img/Nginx.assets/image-20200820165610355.png" alt="image-20200820165610355"></p><ul><li>块级指令格式为：指令名 {简单指令}</li></ul><p><img src="/img/Nginx.assets/image-20200820165729596.png" alt="image-20200820165729596"></p><ul><li><p>#后为注释内容。</p><blockquote><p>可以认为整个配置文件用{}包裹，则其上下文暂时理解为作用域吧</p></blockquote></li><li><p>建议按照不同功能模块将配置文件拆分为一组文件，放在<code>/etc/nginx/conf.d</code>文件夹中,在<code>nginx.conf</code>配置文件中使用<code>incloud</code>命令引入</p><p><img src="/img/Nginx.assets/image-20200829113211025.png" alt="image-20200829113211025"></p></li><li><p>Contexts </p><ul><li>events - 处理常规流量</li><li>http - 处理http流量</li><li>mail - 处理mail流量</li><li>stream - 流量TCP、UDP流量</li></ul><blockquote><p>不在以上四种块级指令中定义的命令 则在主上下文中生效</p></blockquote></li><li><p>server 是定义在上下文中的虚拟服务器，每个上下文中都可以定义多个虚拟服务器，至于server处理何种流量取决于其上下文可以处理何种流量。</p></li><li><p>子上下文中的设置继承于父上下文，可以在子上下文中重新定义来覆盖，重写</p></li></ul><h3 id="静态资源服务器"><a href="#静态资源服务器" class="headerlink" title="静态资源服务器"></a>静态资源服务器</h3><pre><code class="hljs shell">http &#123;        server &#123;                location / &#123;                        root /home/chen/blog;                &#125;                location /img/ &#123;                        root /home/chen/blog/public;                &#125;        &#125;&#125;</code></pre><hr><p>/home/chen/blog文件如下：</p><p><img src="/img/Nginx.assets/image-20200820184348402.png" alt="image-20200820184348402"></p><p><a href="http://localhost/package.json">http://localhost/package.json</a></p><p><img src="/img/Nginx.assets/image-20200820184433253.png" alt="image-20200820184433253"></p><p>匹配到/home/chen/blog文件夹下的package.json文件</p><hr><p>root /home/chen/blog/public文件如下：</p><p><img src="/img/Nginx.assets/image-20200820184905687.png" alt="image-20200820184905687"></p><p><a href="http://localhost/img/default.png">http://localhost/img/default.png</a></p><p><img src="/img/Nginx.assets/image-20200820184930795.png" alt="image-20200820184930795"></p><p>匹配到/home/chen/blog/public文件夹下的./img/default.png文件</p><h3 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h3><blockquote><p><strong>正向代理</strong>：隐藏客户端，客户端通过代理服务器A访问真实的服务器B，服务器B并不知道访问自己的客户端是谁。</p><p><strong>反向代理</strong>：隐藏服务器，客户端访问代理服务器A，代理服务器将请求分发到真是的服务器BCD等，客户端只知道访问了服务器A，实际内容是BCD提供的。</p></blockquote><blockquote><p>客户端有无感知：</p><p><strong>普通代理</strong>：需要客户端指定代理服务器ip端口号，常用的vpn。</p><p><strong>透明代理</strong>：客户端无感知，企业服务路由GateWay。</p></blockquote><ul><li>简单静态资源代理</li></ul><blockquote><p>算是反向代理吧 将80端口的请求分发到8080</p></blockquote><ol><li>配置文件新增server</li></ol><pre><code class="hljs shll">server &#123;    listen 8080;    root &#x2F;home&#x2F;chen&#x2F;blog&#x2F;public;    location &#x2F; &#123;    &#125;&#125;</code></pre><p>监听8080端口，将该端口的所有请求（/）匹配到服务器路径/home/chen/blog下的资源。</p><blockquote><p>在之前静态资源服务器中，因为80是默认端口，可以不用listen指定端口。</p></blockquote><p>资源目录/home/chen/blog/public</p><p><img src="/img/Nginx.assets/image-20200821143422848.png" alt="image-20200821143422848"></p><p>请求：<a href="http://192.168.240.239:8080/index.html">http://192.168.240.239:8080/index.html</a></p><p><img src="/img/Nginx.assets/image-20200821143641539.png" alt="image-20200821143641539"></p><ol start="2"><li>修改上节的静态资源服务器</li></ol><pre><code class="hljs shell">server &#123;               location / &#123;                       proxy_pass http://localhost:8080;               &#125;               location /img/ &#123;                       root /home/chen/blog/public;               &#125;       &#125;</code></pre><p>80端口的请求会被代理到本地8080端口，也就是匹配1.中的服务器，进而匹配/home/chen/blog/public下面的资源，现在访问<a href="http://192.168.240.239/index.html%E4%BC%9A%E8%AE%BF%E9%97%AE%E5%88%B0/home/chen/blog/public%E8%B7%AF%E5%BE%84%E4%B8%8B%E9%9D%A2%E7%9A%84index.html%E9%A1%B5%E9%9D%A2%EF%BC%88">http://192.168.240.239/index.html会访问到/home/chen/blog/public路径下面的index.html页面（</a><u>修改之前的/home/chen/blog路径下面是没有index.html页面的</u>），如下图：</p><p><img src="/img/Nginx.assets/image-20200821144416050.png" alt="image-20200821144416050"></p><ol start="3"><li>修改 图片location使其匹配特定文件</li></ol><pre><code class="hljs shell">server &#123;               location / &#123; # location1                       proxy_pass http://localhost:8080;               &#125;               location ~\.(gif|jpg|png)$ &#123; # location2                       root /home/chen/blog/public/img;               &#125;       &#125;</code></pre><p>~标识当前文件夹，后面匹配正则表达式。</p><p>访问<a href="http://192.168.240.239/default.png">http://192.168.240.239/default.png</a></p><ul><li>注意当前匹配的是location2</li></ul><p><img src="/img/Nginx.assets/image-20200821150134637.png" alt="image-20200821150134637"></p><p>访问<a href="http://192.168.240.239/img/default.png">http://192.168.240.239/img/default.png</a></p><ul><li>当前匹配的是location1</li></ul><p><img src="/img/Nginx.assets/image-20200821150613246.png" alt="image-20200821150613246"></p><blockquote><p>location1 代理到8080端口访问，从而映射/home/chen/blog/public文件夹，img文件夹刚好在此文件夹下面因此可以<a href="http://192.168.240.239/img/default.png%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%B0%9D%E8%AF%95%E8%AE%BF%E9%97%AE%E5%85%B6%E4%BB%96%E5%AD%90%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E6%96%87%E4%BB%B6%E5%88%99%E5%8F%AF%E4%BB%A5%E5%8C%BA%E5%88%86%E6%98%AF%E8%B5%B0%E7%9A%84%E5%93%AA%E4%B8%80%E4%B8%AAlocation">http://192.168.240.239/img/default.png访问，尝试访问其他子文件夹的文件则可以区分是走的哪一个location</a></p><pre><code class="hljs shell">location ~\.(gif|jpg|png|css)$ &#123;    root /home/chen/blog/public/img;&#125;</code></pre><p><a href="http://192.168.240.239/css/main.css">http://192.168.240.239/css/main.css</a> (location1 -&gt; 代理到8080 -&gt; /home/chen/blog/public -&gt; css/main.css)</p><p><img src="/img/Nginx.assets/image-20200821151514613.png" alt="image-20200821151514613"></p><p><a href="http://192.168.240.239/main.css">http://192.168.240.239/main.css</a> (location2 -&gt; /home/chen/blog/public/img -&gt; main.css（404）)</p><p><img src="/img/Nginx.assets/image-20200821151545926.png" alt="image-20200821151545926"></p></blockquote><hr><h2 id="Nginx处理请求过程"><a href="#Nginx处理请求过程" class="headerlink" title="Nginx处理请求过程"></a>Nginx处理请求过程</h2><ol><li>先选定虚拟主机处理请求</li></ol><p>资源目录文件如下：</p><p><img src="/img/Nginx.assets/image-20200821164941794.png" alt="image-20200821164941794"></p><hr><p>server配置：</p><pre><code class="hljs shell">server &#123;    listen 8080;    root /home/chen/blog/public/css;    location / &#123;    &#125;&#125;server &#123;    listen 8080;    root /home/chen/blog/public/js;    ocation / &#123;    &#125;&#125;server &#123;    listen 8080;    root /home/chen/blog/public/img;    location / &#123;    &#125;&#125;</code></pre><p>请求第一个server: <a href="http://192.168.240.239:8080/main.css">http://192.168.240.239:8080/main.css</a></p><p><img src="/img/Nginx.assets/image-20200821165142399.png" alt="image-20200821165142399"></p><p>请求第二个server: <a href="http://192.168.240.239:8080/main.js">http://192.168.240.239:8080/main.js</a></p><p><img src="/img/Nginx.assets/image-20200821165211353.png" alt="image-20200821165211353"></p><p>请求第三个server: <a href="http://192.168.240.239:8080/default.png">http://192.168.240.239:8080/default.png</a></p><p><img src="/img/Nginx.assets/image-20200821165327762.png" alt="image-20200821165327762"></p><blockquote><p>以上配置server一样，nginx会默认选用第一个server.</p></blockquote><hr><p>server配置:</p><pre><code class="hljs shell">server &#123;               listen 8080;               root /home/chen/blog/public/css;               location / &#123;               &#125;       &#125;       server &#123;               listen 8080 default_server; #default_server 指定默认端口号               root /home/chen/blog/public/js;               location / &#123;               &#125;       &#125;       server &#123;               listen 8080;               root /home/chen/blog/public/img;               location / &#123;               &#125;       &#125;</code></pre><p>请求第一个server: <a href="http://192.168.240.239:8080/main.css">http://192.168.240.239:8080/main.css</a></p><p><img src="/img/Nginx.assets/image-20200821170424132.png" alt="image-20200821170424132"></p><p>请求第二个server: <a href="http://192.168.240.239:8080/main.js">http://192.168.240.239:8080/main.js</a></p><p><img src="/img/Nginx.assets/image-20200821170439230.png" alt="image-20200821170439230"></p><p>请求第三个server: <a href="http://192.168.240.239:8080/default.png">http://192.168.240.239:8080/default.png</a></p><p><img src="/img/Nginx.assets/image-20200821170543463.png" alt="image-20200821170543463"></p><blockquote><p>default_server 指定默认server监听的端口 不同的监听端口可以设置不同的默认服务器</p></blockquote><hr><p>server配置：</p><pre><code class="hljs shell">server &#123;               listen 8088;               server_name www.test.com;               root /home/chen/blog/public/css;               location / &#123;               &#125;       &#125;       server &#123;               listen 8080 default_server;               server_name www.test.com;               root /home/chen/blog/public/js;               location / &#123;               &#125;       &#125;       server &#123;               listen 8080;               server_name www.test.com;               root /home/chen/blog/public/img;               location / &#123;               &#125;       &#125;</code></pre><p>请求第一个server: <a href="http://192.168.240.239:8080/main.css">http://192.168.240.239:8080/main.css</a></p><p><img src="/img/Nginx.assets/image-20200821171844568.png" alt="image-20200821171844568"></p><p>请求第二个server: <a href="http://192.168.240.239:8080/main.js">http://192.168.240.239:8080/main.js</a></p><p><img src="/img/Nginx.assets/image-20200821171906824.png" alt="image-20200821171906824"></p><p>请求第三个server: <a href="http://192.168.240.239:8080/default.png">http://192.168.240.239:8080/default.png</a></p><p><img src="/img/Nginx.assets/image-20200821171932993.png" alt="image-20200821171932993"></p><blockquote><p>根据ip和端口号匹配server,根据host匹配server_name，未匹配上则走默认server</p></blockquote><hr><p>丢弃未定义主机名的请求：</p><pre><code class="hljs shell">server &#123;    listen       80;    server_name  &quot;&quot;;    return       444;&#125;</code></pre><h2 id="虚拟主机名"><a href="#虚拟主机名" class="headerlink" title="虚拟主机名"></a>虚拟主机名</h2><p>server_name 可以用确定的名字、通配符、正则表达式定义。</p><pre><code class="hljs shell">server &#123;    listen       80;    server_name  www.test.com; # 确定的名字&#125;server &#123;    listen       80;    server_name  *test.com; # 通配符 以test.com结尾的请求&#125;server &#123;    listen       80;    server_name  mail.*; # 通配符 以mail.开头的请求&#125;server &#123;    listen       80;    server_name  ~^(?&lt;user&gt;.+)\.example\.net$; # 正则&#125;</code></pre><p>如果匹配到多个server_name则按照以下优先级：</p><ol><li>准确名字</li><li>最长的以*起始的名字</li><li>最长的以*结尾的名字</li><li>正则匹配的名字</li></ol><p>其他类型：</p><p>​    “” 非默认主机处理请求头不含host字段的请求</p><p>​    IP 以IP地址来请求服务器</p><ul><li>确切名字和通配符名字存在哈希表中，哈希表和监听端口关联。nginx先找确切名字的哈希表，再找通配符名字的哈希表。正则主机名则是最后查找，并且是串行查找，效率最慢，因此最好用确定主机名。</li><li>定义了大量的名字或十分长的名字，则需要在<em>http</em>配置块中使用server_names_hash_max_size和server_names_hash_bucket_size指令进行调整。</li></ul><h2 id="请求处理方式"><a href="#请求处理方式" class="headerlink" title="请求处理方式"></a>请求处理方式</h2><p>​    nginx支持多种请求处理方式，可以使用哪些处理方式取决于平台。平台支持多种方式，则nginx会默认选用最高效的方式处理。也可以用use指令明确指定处理方式。</p><p>nginx支持的请求处理方式：</p><ul><li><p><code>select</code> — 标准方法。 在平台不支持更高效的方法时，nginx会自动编译此模块。 可以使用<code>--with-select_module</code>和<code>--without-select_module</code>编译选项 强行开启或禁止编译此模块。</p></li><li><p><code>poll</code> — 标准模块。 在平台不支持更高效的方法时，nginx会自动编译此模块。 可以使用<code>--with-poll_module</code>和<code>--without-poll_module</code>编译选项 强行开启或禁止编译此模块。</p></li><li><p><code>kqueue</code> — FreeBSD 4.1+、OpenBSD 2.9+、NetBSD 2.0和Mac OS X的高效方法。</p></li><li><p><code>epoll</code> — Linux 2.6+的高效方法。</p><blockquote><p>一些旧的发行版，比如SuSE 8.2，提供了补丁，在2.4内核上支持了epoll方法。</p></blockquote></li></ul><ul><li><p><code>rtsig</code> — 实时信号，Linux 2.2.19+的高效方法。 系统级的事件队列默认有1024个信号的限制。在高负载的服务器上，将此限制上调可能是必须的。 调整的方法是改变<code>/proc/sys/kernel/rtsig-max</code>内核参数的值。 在Linux 2.6.6-mm2上，这个参数不存在，而且每个进程拥有自己的事件队列。 每个队列的长度由<code>RLIMIT_SIGPENDING</code>所限，并可使用worker_rlimit_sigpending指令修改。</p><p>队列溢出时，nginx丢弃这个队列，并回退到<code>poll</code>连接处理方法，直到情况恢复正常为止。</p></li><li><p><code>/dev/poll</code> — Solaris 7 11/99+、HP/UX 11.22+ (eventport)、IRIX 6.5.15+和Tru64 UNIX 5.1A+的高效方法。</p></li><li><p><code>eventport</code> — 事件端口，Solaris 10的高效方法。</p></li></ul><h2 id="Nginx控制命令"><a href="#Nginx控制命令" class="headerlink" title="Nginx控制命令"></a>Nginx控制命令</h2><blockquote><p>主进程的PID会在Nginx启动的时候写入到<u>/usr/local/nginx/logs</u>或<u>/var/run</u>路径下的nginx.pid文件。</p><p>pid可以在<u>/etc/nginx/nginx.conf</u> 文件中用pid来指定。</p><pre><code class="hljs shell">kill -[signal] [pid]</code></pre></blockquote><p>主进程接收一下信号：</p><ul><li><code>TERM</code>, <code>INT</code>: 立刻退出</li><li><code>QUIT</code>: 等待工作进程结束后再退出</li><li><code>KILL</code>: 强制终止进程</li><li><code>HUP</code>: 重新加载配置文件，使用新的配置启动工作进程，并逐步关闭旧进程。</li><li><code>USR1</code>: 重新打开日志文件</li><li><code>USR2</code>: 启动新的主进程，实现热升级</li><li><code>WINCH</code>: 逐步关闭工作进程</li></ul><p>工作进程接收以下信号：</p><ul><li><code>TERM</code>, <code>INT</code>: 立刻退出</li><li><code>QUIT</code>: 等待请求处理结束后再退出</li><li><code>USR1</code>: 重新打开日志文件</li></ul>]]></content>
    
    
    <categories>
      
      <category>web服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
